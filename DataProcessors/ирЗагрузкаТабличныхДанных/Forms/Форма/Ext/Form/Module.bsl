Перем ПрошлыйМетаданныеСсылкиИсточника;
Перем мПлатформа;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет установку реквизитов, связанных с источником данных
//
Процедура УстановитьИсточник()
	
	ОчиститьСопоставлениеКолонокБД();
	СписокСохраненныхНастроек = ХранилищеОбщихНастроек.Загрузить("ИнструментыРазработчикаTormozit", "ирЗагрузкаТабличныхДанных." + ПолноеИмяТаблицы);
	ЗагрузитьНастройкуПоУмолчанию();
	ПрошлыйМетаданныеСсылкиИсточника = Неопределено;
	ЭтотОбъект.мЭтоСсылочныйОбъект = Ложь;
	МетаданныеИсточника = ПолучитьМетаданныеИсточника();
	Если МетаданныеИсточника <> Неопределено Тогда
		ЭтаФорма.ПредставлениеТаблицы = МетаданныеИсточника.Представление();
		ЭтотОбъект.мЭтоСсылочныйОбъект = ирОбщий.ЛиСсылочныйОбъектМетаданных(МетаданныеИсточника, Ложь);
	КонецЕсли;
	Если ТаблицаЗначений.Колонки.Количество() = 0 Тогда
		ОбновитьКолонкиТаблицыЗначений(, ЗначениеЗаполнено(ПолноеИмяТаблицы));
	КонецЕсли; 
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	СопоставлениеКолонокТЗЗаполнить();
	ЗаполнитьСопоставлениеКолонокБД();
	Если ЭлементыФормы.ТабличныйДокумент.ВысотаТаблицы <= СтрокаЗаголовковТабличногоДокумента Тогда
		ОбновитьДанныеТабличногоДокумента(Истина);
	КонецЕсли; 
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкуПоУмолчанию()
	
	НастройкаПоУмолчанию = ПолучитьНастройкуПоУмолчанию(СписокСохраненныхНастроек);
	Если НастройкаПоУмолчанию <> Неопределено Тогда
		ЗагрузитьНастройку(НастройкаПоУмолчанию);
	КонецЕсли;

КонецПроцедуры

// Заполняет настройки колонок по умолчанию или по переданным настройкам
//
// Параметры:
//  Настройки - табличный документ или неопределено
//
Процедура ЗагрузитьНастройку(Настройка) Экспорт
	
	Если Настройка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Настройка,, "СопоставлениеКолонокТЗ, СопоставлениеКолонокБД"); 
		СопоставлениеКолонокТЗ.Очистить();
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(Настройка.СопоставлениеКолонокТЗ, СопоставлениеКолонокТЗ);
		СопоставлениеКолонокБД.Очистить();
		ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(Настройка.СопоставлениеКолонокБД, СопоставлениеКолонокБД);
		ОбластьИсточник = Настройка.ШапкаТабличногоДокумента.Область(1, 1, 1, Настройка.ШапкаТабличногоДокумента.ШиринаТаблицы);
		ОбластьПриемник = ТабличныйДокумент.Область(СтрокаЗаголовковТабличногоДокумента, ОбластьИсточник.Лево, СтрокаЗаголовковТабличногоДокумента, ОбластьИсточник.Право);
		ТабличныйДокумент.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник);
		СинхронизироватьРеквизитыОбъекта();
	Иначе
		ЭтаФорма.ПередЗаписьюОбъекта   = "";
		ЭтаФорма.ПриЗаписиОбъекта      = "";
		ЭтаФорма.ПослеДобавленияСтроки = "";
		ЗаполнитьСопоставлениеКолонокТЗ();
	КонецЕсли; 
	СопоставлениеКолонокТЗЗаполнить();
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам();
	
КонецПроцедуры // ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обаботчик события "ОбновлениеОтображения" Формы
//
Процедура ОбновлениеОтображения()
	
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.Видимость = мЭтоСсылочныйОбъект;
	//ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ПолеПоиска.ИзменятьВидимость = мЭтоСсылочныйОбъект;
	ДоступностьКнопкиВосстановитьЗначения = (СписокСохраненныхНастроек <> Неопределено) И СписокСохраненныхНастроек.Количество() <> 0;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ВосстановитьЗначения.Доступность = ДоступностьКнопкиВосстановитьЗначения;
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обаботчик события "ПриОткрытии" Формы
//
Процедура ПриОткрытии()
	
	мПлатформа = ирКэш.Получить();
	ЭлементыФормы.ТабличныйДокумент.Очистить();
	Инициализация();
	ОбновитьДоступность();
	УстановитьИсточник();
	
КонецПроцедуры

// Процедура - обаботчик события "ПриЗакрытии" Формы
//
Процедура ПриЗакрытии()
	
	СохранитьНастройкиФормы();
	
КонецПроцедуры

Процедура СохранитьНастройкиФормы()
	
	ХранилищеОбщихНастроек.Сохранить("ИнструментыРазработчикаTormozit", "ирЗагрузкаТабличныхДанных." + ПолноеИмяТаблицы, СписокСохраненныхНастроек);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

// Процедура - обаботчик события "Открытие" в: Поле выбора "ТипОбъекта"
//
Процедура ТипОбъектаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ирОбщий.ОткрытьОбъектМетаданныхЛкс(ПолучитьМетаданныеИсточника());
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении" в: Поле ввода "ТабличнаяЧастьИсточника"
//
Процедура ТабличнаяЧастьИсточникаПриИзменении(Элемент)
	
	УстановитьИсточник();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура - обаботчик события, при нажатии на кнопку "Установить флажки" Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыУстановитьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ, , Истина);
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Снять флажки" Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельЗагружаемыеРеквизитыСнятьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ, , Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Контроль заполнения" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаКонтрольЗаполнения(Кнопка)
	
	//СформироватьСтруктуруКолонок();
	КонтрольЗаполнения();
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Обновить" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаОбновить(Кнопка)
	
	ОбновитьДанныеТабличногоДокумента();
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Предыдущее примечание" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаПредыдущееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево - 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка > 0 Цикл
		
		Пока Не Нашли и Колонка > 0 Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка - 1;
		КонецЦикла;
		Строка = Строка - 1;
		Колонка = ТабличныйДокумент.ШиринаТаблицы;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнуто начало документа");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Следующее примечание" Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаСледующееПримечание(Кнопка)
	
	ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
	
	Нашли = Ложь;
	
	Колонка = ТабличныйДокумент.ТекущаяОбласть.Лево + 1;
	Строка  = ТабличныйДокумент.ТекущаяОбласть.Верх;
	
	Пока Не Нашли и Строка <= ТабличныйДокумент.ВысотаТаблицы Цикл
		
		Пока Не Нашли и Колонка <=  ТабличныйДокумент.ШиринаТаблицы Цикл
			
			Область = ТабличныйДокумент.Область("R" + Формат(Строка, "ЧГ=") + "C" + Формат(Колонка, "ЧГ="));
			Нашли = Не ПустаяСтрока(Область.Примечание.Текст);
			
			Колонка = Колонка + 1;
		КонецЦикла;
		Строка = Строка + 1;
		Колонка = 1;
	КонецЦикла;
	
	Если Нашли Тогда
		ТабличныйДокумент.ТекущаяОбласть = Область;
	Иначе
		Предупреждение("Достигнут конец документа");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить в файл..." Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаСохранить(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	
	ДиалогВыбораФайла.Заголовок = "Сохранить табличный документ в файл";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Лист Excel (*.xlsx)|*.xlsx|Open document (*.ods)|*.ods|Текстовый документ (*.txt)|*.txt";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.MXL);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xls" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".xlsx" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLSX);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.TXT);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".ods" Тогда
			ТабличныйДокумент.Записать(ДиалогВыбораФайла.ПолноеИмяФайла, ТипФайлаТабличногоДокумента.ODS);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Открыть файл..." Командной панели "КоманднаяПанельТабличногоДокумента"
//
Процедура КоманднаяПанельТабличногоДокументаОткрыть(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Заголовок = "Прочитать табличный документ из файла";
	ДиалогВыбораФайла.Фильтр    = "Табличный документ (*.mxl)|*.mxl|Лист Excel (*.xls)|*.xls|Лист Excel (*.xlsx)|*.xlsx|Open document (*.ods)|*.ods|Текстовый документ (*.txt)|*.txt|dBase III (*.dbf)|*.dbf|";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		
		ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;
		ФайлНаДиске = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Если нРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			мПрочитатьТабличныйДокументИзТекста(ТабличныйДокумент, ДиалогВыбораФайла.ПолноеИмяФайла);
		ИначеЕсли нРег(ФайлНаДиске.Расширение) = ".dbf" Тогда
			мПрочитатьТабличныйДокументИзDBF(ТабличныйДокумент, ДиалогВыбораФайла.ПолноеИмяФайла);
		Иначе
			ТабличныйДокумент.Прочитать(ДиалогВыбораФайла.ПолноеИмяФайла);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Выбрать значение" Командной панели "КоманднаяПанельВыбратьЗначение"
//
Процедура КоманднаяПанельВыбратьЗначениеВыбратьЗначение(Кнопка)
	
	ВыбратьЗначениеВЯчейке();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить настройки..." Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельФормыСохранитьЗначения(Кнопка)
	
	ФормаСохраненияНастройки = ПолучитьФорму("ФормаСохраненияНастройки");
	Если Не СписокСохраненныхНастроек = Неопределено Тогда
		ФормаСохраненияНастройки.СпискокНастроек = СписокСохраненныхНастроек.Скопировать();
	КонецЕсли;
	ТекущиеДанные = ФормаСохраненияНастройки.ОткрытьМодально();
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.Значение = мПолучитьНастройки();
		ЭтаФорма.СписокСохраненныхНастроек = ФормаСохраненияНастройки.СпискокНастроек.Скопировать();
		СохранитьНастройкиФормы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Восстановить настройки..." Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельФормыВосстановитьЗначения(Кнопка)
	
	ФормаВыбораНастройки = ПолучитьФорму("ФормаВыбораНастройки");
	ФормаВыбораНастройки.СпискокНастроек = СписокСохраненныхНастроек;
	ТекущиеДанные = ФормаВыбораНастройки.ОткрытьМодально();
	Если ТекущиеДанные <> Неопределено Тогда
		ЗагрузитьНастройку(ТекущиеДанные.Значение);
	КонецЕсли;
	ЭтаФорма.СписокСохраненныхНастроек = ФормаВыбораНастройки.СпискокНастроек.Скопировать();
	СохранитьНастройкиФормы();
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Сохранить настройки в файл..." Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельФормыСохранитьЗначенияВФайл(Кнопка)
	
	Настройки = мПолучитьНастройки();
	Если Настройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Если ДиалогВыбораФайла.Выбрать() Тогда
		ирОбщий.СохранитьЗначениеВФайлИнтерактивноЛкс(Настройки, "sxl", "Настройка загрузки табличных данных");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Восстановить настройки из файла..." Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельФормыВосстановитьЗначенияИзФайла(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки";
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("sxl", "Настройка загрузки табличных данных");
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Настройка = ирОбщий.ПрочитатьЗначениеИзФайлаСКонтролемПотерьЛкс(ДиалогВыбораФайла.ПолноеИмяФайла);
		ЗагрузитьНастройку(Настройка);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события, при нажатии на кнопку "Перечитать " Командной панели "КоманднаяПанельСопоставлениеКолонокТЗ"
//
Процедура КоманднаяПанельФормыПеречитать(Кнопка)
	
	Ответ = Вопрос("Перечитать настройки по умолчанию? Текущие настройки будут потеряны.", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	ЗагрузитьНастройкуПоУмолчанию();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события, при нажатии на кнопку "Загрузить" Командной панели "ОсновныеДействияФормы"
//
Процедура ОсновныеДействияФормыКонвертировать(Кнопка)
	
	ЗагрузитьВТаблицуЗначений();
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ЗАГРУЖАЕМЫХ РЕКВИЗИТОВ

// Процедура - обаботчик события "ПередНачаломИзменения"  табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	РежимЗагрузкиИскать = ТекущиеДанные.РежимКонвертации = "Искать";
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоВладельцу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоВладельцу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоВладельцу,ТекущиеДанные.СвязьПоВладельцу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	Если Не ПустаяСтрока(ТекущиеДанные.СвязьПоТипу) И СписокВыбора.НайтиПоЗначению(ТекущиеДанные.СвязьПоТипу) = Неопределено Тогда
		СписокВыбора.Вставить(0,ТекущиеДанные.СвязьПоТипу,ТекущиеДанные.СвязьПоТипу);
	КонецЕсли;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЭлементСвязиПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0 или Не РежимЗагрузкиИскать;
	
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЗначениеПоУмолчанию.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
КонецПроцедуры

// Процедура - обаботчик события "ПриВыводеСтроки"  табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РежимЗагрузкиВычислять = ДанныеСтроки.РежимКонвертации = "Вычислять";
	Если РежимЗагрузкиВычислять Тогда
		ОформлениеСтроки.Ячейки.ИскатьПо           .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоВладельцу   .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СвязьПоТипу        .Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу .Видимость = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Алгоритм.Видимость = Ложь;
	КонецЕсли;
	Если ДанныеСтроки.Пометка Тогда
		Если Не ДанныеСтроки.РежимКонвертации = "Искать" Тогда
			ЦветРежимЗагрузкиИскать = ЦветаСтиля.ЦветРамки;
			ОформлениеСтроки.Ячейки.ИскатьПо              .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоВладельцу      .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоТипу           .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу    .ЦветТекста = ЦветРежимЗагрузкиИскать;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//

// Процедура - обаботчик события "НачалоВыбора"  колонки "ОписаниеТипов" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	Описание = ТекущиеДанные.ДоступноеОписаниеТипов;
	МассивТипов = Новый Массив;
	Для Каждого Тип Из Описание.Типы() Цикл
		МассивТипов.Добавить(Тип);
	КонецЦикла;
	
	Элемент.ДоступныеТипы = Новый ОписаниеТипов(МассивТипов, Описание.КвалификаторыЧисла, Описание.КвалификаторыСтроки, Описание.КвалификаторыДаты);
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "ОписаниеТипов" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.ОписаниеТипов = ТекущиеДанные.ДоступноеОписаниеТипов;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ОписаниеТипов" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовОписаниеТиповПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(ТекущиеДанные.ЗначениеПоУмолчанию);
	
	СписокВыбора = ПолучитьСписокИменПредставлений(ТекущиеДанные);
	ТекущиеДанные.ИскатьПо = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИскатьПо.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоВладельцу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоВладельцу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоВладельцу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	СписокВыбора = ПолучитьСписокСвязейПоТипу(ТекущиеДанные);
	ТекущиеДанные.СвязьПоТипу = ?(СписокВыбора.Количество() = 0, Неопределено, СписокВыбора[0].Значение);
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.СписокВыбора = СписокВыбора;
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СвязьПоТипу.ЭлементУправления.ТолькоПросмотр = СписокВыбора.Количество() = 0;
	
	ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ЗначениеПоУмолчанию.ЭлементУправления.КнопкаВыбора = Не ТипЗНЧ(ТекущиеДанные.ЗначениеПоУмолчанию) = Тип("Строка");
	
КонецПроцедуры


// Процедура - обаботчик события "НачалоВыбора"  колонки "ЗначениеПоУмолчанию" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТипЗНЧ(СвязьПоВладельцу) = Тип("Строка") Тогда
		СтрокаСвязиПоВладельцу = СопоставлениеКолонокТЗ.Найти(СвязьПоВладельцу, "ИмяРеквизита");
		
		Если Не СтрокаСвязиПоВладельцу = Неопределено Тогда
			СвязьПоВладельцу = СтрокаСвязиПоВладельцу.ЗначениеПоУмолчанию;
		Иначе
			СвязьПоВладельцу = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Элемент.ВыборПоВладельцу = СвязьПоВладельцу;
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "ЗначениеПоУмолчанию" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовЗначениеПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТипов.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "НомерКолонки" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкиТабличногоДокумента = ПолучитьКолонкиТабличногоДокумента();
	КолонкаИсточника = КолонкиТабличногоДокумента[Элемент.Значение];
	СопоставитьКолонкуТЗ(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока, КолонкаИсточника);
	Если КолонкаИсточника <> Неопределено Тогда
		Элемент.Значение = КолонкаИсточника.Заголовок;
	КонецЕсли; 
	ОбновитьСопоставлениеКолонокТЗ();
	
КонецПроцедуры

// Процедура - обаботчик события "Очистка"  колонки "РежимКонвертации" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "РежимКонвертации" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовРежимЗагрузкиПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные;
	
	Если ПустаяСтрока(ТекущиеДанные.РежимКонвертации) Тогда
		ТекущиеДанные.РежимКонвертации = "Устанавливать";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ИмяКолонкиИсточника) И ТекущиеДанные.РежимКонвертации = "Искать" Тогда
		Предупреждение("Не выбран номер колонки табличного документа");
		ТекущиеДанные.РежимКонвертации = "Устанавливать"
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ПриИзменении"  колонки "ИскатьПо" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовИскатьПоПриИзменении(Элемент)
	
	Если ПустаяСтрока(Элемент.Значение) И Не Элемент.СписокВыбора.Количество() = 0 Тогда
		Элемент.Значение = Элемент.СписокВыбора[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаВыбора"  колонки "СвязьПоВладельцу" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоВладельцуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			Менеджер = ирОбщий.ПолучитьМенеджерЛкс(Тип(ВыбранноеЗначение));
			
			ФормаМенеджера = Менеджер.ПолучитьФормуВыбора(, ЭтаФорма, Элемент);
			ФормаМенеджера.НачальноеЗначениеВыбора = Элемент.Значение;
			НовоеЗначение = ФормаМенеджера.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обаботчик события "ОбработкаВыбора"  колонки "СвязьПоТипу" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовСвязьПоТипуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗНЧ(ВыбранноеЗначение) = Тип("Строка") Тогда
		Если Не Найти(ВыбранноеЗначение, ".") = 0 Тогда
			Менеджер = ирОбщий.ПолучитьМенеджерЛкс(Тип(ВыбранноеЗначение));
			ФормаМенеджера = Менеджер.ПолучитьФормуВыбора(, ЭтаФорма, Элемент);
			ФормаМенеджера.НачальноеЗначениеВыбора = Элемент.Значение;
			НовоеЗначение = ФормаМенеджера.ОткрытьМодально();
			Если Не НовоеЗначение = Неопределено Тогда
				Результат = Элемент.СписокВыбора.НайтиПоЗначению(НовоеЗначение);
				Если Результат = Неопределено Тогда
					Элемент.СписокВыбора.Вставить(0,НовоеЗначение,НовоеЗначение);
				КонецЕсли;
				Элемент.Значение = НовоеЗначение;
			КонецЕсли;
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обаботчик события "НачалоВыбора"  колонки "Алгоритм" табличного поля "СопоставлениеКолонокТЗ"
//
Процедура ТаблицаЗагружаемыхРеквизитовВыражениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыАлгоритма = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмКонвертации"),,,, Истина);
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	мПлатформа.РедактироватьАлгоритм(Элемент.Значение, ПараметрыАлгоритма);

КонецПроцедуры

Процедура ОсновныеДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура ТипОбъектаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ирОбщий.ПолучитьФормуВыбораОбъектаМетаданныхЛкс(,, Элемент.Значение,, Истина,, Истина,,, Истина);
	РезультатФормы = Форма.ОткрытьМодально();
	Если РезультатФормы <> Неопределено Тогда
		Элемент.Значение = РезультатФормы.ПолноеИмяОбъекта;
		ПолноеИмяТаблицыПриИзменении(Элемент);
	КонецЕсли; 
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ПолноеИмяТаблицыПриИзменении(Элемент)
	
	УстановитьИсточник();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ПолноеИмяТаблицыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура КоманднаяПанельЗагружаемыеРеквизитыВТаблицуЗначений(Кнопка)
	
	
КонецПроцедуры

Процедура ТаблицаЗначенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.КоманднаяПанельТаблицаЗначений.Кнопки.Идентификаторы);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийИдентификаторы(Кнопка)
	
	ирОбщий.КнопкаОтображатьПустыеИИдентификаторыНажатиеЛкс(Кнопка);
	ЭлементыФормы.ТаблицаЗначений.ОбновитьСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийШиринаКолонок(Кнопка)
	
	ирОбщий.РасширитьКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийМенеджерТабличногоПоля(Кнопка)
	
	ирОбщий.ОткрытьМенеджерТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРазличныеЗначенияКолонки(Кнопка)
	
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ЭлементыФормы.ТаблицаЗначений);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРедакторОбъектаБД(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаЗначений);

КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	УстановитьИсточник();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗагрузить(Кнопка)
	
	ЗагрузитьВТаблицуБД();
	ЭлементыФормы.ТаблицаБД.СоздатьКолонки();
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД,, ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы),, Истина);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
	
КонецПроцедуры

Процедура Панель1ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СопоставлениеКолонокТЗ Тогда
		ТекущаяСтрока = ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ТекущееИмяКолонкиПриемника = ТекущаяСтрока.ИмяКолонкиПриемника;
		КонецЕсли; 
		ЗаполнитьСопоставлениеКолонокТЗ();
		Если ТекущееИмяКолонкиПриемника <> Неопределено Тогда
			НоваяТекущаяСтрока = СопоставлениеКолонокТЗ.Найти(ТекущееИмяКолонкиПриемника, "ИмяКолонкиПриемника");
			Если НоваяТекущаяСтрока <> Неопределено Тогда
				ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущаяСтрока = НоваяТекущаяСтрока;
			КонецЕсли; 
		КонецЕсли; 
	ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СопоставлениеКолонокБД Тогда
		ОбновитьСопоставлениеКолонокБД();
	//ИначеЕсли ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ТаблицаБД Тогда
	//	ОбновитьКолонкиТаблицыБД();
	КонецЕсли; 
	ОбновитьДоступность();
	
КонецПроцедуры

Процедура ОбновитьДоступность()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Конвертировать.Доступность = Ложь
		Или ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СопоставлениеКолонокТЗ
		Или ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ТаблицаЗначений;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Загрузить.Доступность = Ложь
		//Или ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.СопоставлениеКолонокБД
		Или ЭлементыФормы.Панель1.ТекущаяСтраница = ЭлементыФормы.Панель1.Страницы.ТаблицаБД;
	Если ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Конвертировать.Доступность Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Конвертировать.КнопкаПоУмолчанию = Истина;
	ИначеЕсли ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Загрузить.Доступность Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Загрузить.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	ЭлементыФормы.Панель1.Страницы.СопоставлениеКолонокБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.Панель1.Страницы.ТаблицаБД.Доступность = ЗначениеЗаполнено(ПолноеИмяТаблицы);
	ЭлементыФормы.СопоставлениеКолонокБД.Колонки.Принадлежность.Видимость = Истина
		И СопоставлениеКолонокБД.Количество() > 0
		И ЗначениеЗаполнено(СопоставлениеКолонокБД[0].Принадлежность);

КонецПроцедуры

Процедура ОсновныеДействияФормыСтруктураФормы(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруФормыЛкс(ЭтаФорма);
	
КонецПроцедуры

Функция ПолучитьОписаниеТиповКлючейРезультатов()

	МассивТипов = Новый Массив();
	ТипКлюча = ирОбщий.ПолучитьТипКлючаЗаписиТаблицыЛкс(ПолноеИмяТаблицы);
	МассивТипов.Добавить(ТипКлюча);
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	Возврат ОписаниеТипов;

КонецФункции

Процедура КоманднаяПанельТаблицаБДВСписок(Кнопка)
	
	Если Не ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	Список = Новый СписокЗначений;
	Список.ТипЗначения = ПолучитьОписаниеТиповКлючейРезультатов();
	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ТаблицаБД.ВыделенныеСтроки Цикл
		Список.Добавить(ВыделеннаяСтрока.Ссылка);
	КонецЦикла;
	ирОбщий.ОткрытьФормуПроизвольногоЗначенияЛкс(Список,,,, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийОткрытьТаблицу(Кнопка)
	
	Если ирОбщий.ОткрытьФормуПроизвольногоЗначенияЛкс(ТаблицаЗначений, Истина,,,,, ЭлементыФормы.ТаблицаЗначений) Тогда 
		СинхронизироватьРеквизитыОбъекта();
		ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьКолонкиТабличногоПоляТаблицыЗначений()
	
	ЭлементыФормы.ТаблицаЗначений.СоздатьКолонки();
	Если ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		ПоляТаблицыБД = ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы);
	КонецЕсли; 
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаЗначений,, ПоляТаблицыБД);
	ЭлементыФормы.ТаблицаЗначений.Колонки[мИмяКолонкиНомерСтроки].ТолькоПросмотр = Истина;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийРедакторОбъектаБДСтроки(Кнопка)
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.ТаблицаБД, ПолноеИмяТаблицы);
	
КонецПроцедуры

Процедура УстановитьПервуюСтрокуДанныхНажатие(Элемент)
	
	ЭтаФорма.ПерваяСтрокаДанныхТабличногоДокумента = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	ПерваяСтрокаДанныхТабличногоДокументаПриИзменении();
	ЭлементыФормы.ТабличныйДокумент.ФиксацияСверху = ПерваяСтрокаДанныхТабличногоДокумента - 1;
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура УстановитьСтрокуЗаголовковНажатие(Элемент)
	
	ЭтаФорма.СтрокаЗаголовковТабличногоДокумента = ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх;
	СтрокаЗаголовковТабличногоДокументаПриИзменении();
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура ПерваяСтрокаДанныхТабличногоДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ПерваяСтрокаДанныхТабличногоДокумента, 1, ПерваяСтрокаДанныхТабличногоДокумента, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура СтрокаЗаголовковТабличногоДокументаОткрытие(Элемент, СтандартнаяОбработка)
	
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(СтрокаЗаголовковТабличногоДокумента, 1, СтрокаЗаголовковТабличногоДокумента, ЭлементыФормы.ТабличныйДокумент.ШиринаТаблицы);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ПерваяСтрокаДанныхТабличногоДокументаПриИзменении(Элемент = Неопределено)
	
	Если СтрокаЗаголовковТабличногоДокумента >= ПерваяСтрокаДанныхТабличногоДокумента Тогда
		СтрокаЗаголовковТабличногоДокумента = ПерваяСтрокаДанныхТабличногоДокумента - 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СтрокаЗаголовковТабличногоДокументаПриИзменении(Элемент = Неопределено)
	
	Если СтрокаЗаголовковТабличногоДокумента >= ПерваяСтрокаДанныхТабличногоДокумента Тогда
		ПерваяСтрокаДанныхТабличногоДокумента = СтрокаЗаголовковТабличногоДокумента + 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДЗаполнитьПоИменам(Кнопка)
	
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам(Истина);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДЗаполнитьПоСинонимам(Кнопка)
	
	СопоставлениеКолонокБДЗаполнитьПоИменамСинонимам(Ложь);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки.Найти(Элемент.Значение);
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	ОбновитьСопоставлениеКолонокБД();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаПриИзменении(Элемент)
	
	КолонкаИсточника = ТаблицаЗначений.Колонки[Элемент.Значение];
	СопоставитьКолонкуБД(ЭлементыФормы.СопоставлениеКолонокБД.ТекущаяСтрока, КолонкаИсточника);
	Элемент.Значение = КолонкаИсточника.Заголовок;
	ОбновитьСопоставлениеКолонокБД();

КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаНесопоставленнойКолонки Из КолонкиТЗ Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.ИмяКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	Для Каждого СтрокаНесопоставленнойКолонки Из КолонкиТЗ Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.СинонимКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();

КонецПроцедуры

Процедура СопоставлениеКолонокТаблицыБДПриИзмененииФлажка(Элемент, Колонка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокБД.ТекущиеДанные;
	Если Колонка = ЭлементыФормы.СопоставлениеКолонокБД.Колонки.МожетБытьПолемПоиска Тогда
		ТекущиеДанные.ПолеПоиска = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура СопоставлениеКолонокБДПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Ключевое Тогда
		ОформлениеСтроки.Ячейки.ПолеПоиска.ТолькоПросмотр = Истина;
		ОформлениеСтроки.Ячейки.Пометка.ТолькоПросмотр = Истина;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;

	Если ДанныеСтроки.Пометка Тогда
		Если Не ДанныеСтроки.ИзИсточника Тогда
			ЦветРежимЗагрузкиИскать = ЦветаСтиля.ЦветРамки;
			ОформлениеСтроки.Ячейки.СвязьПоВладельцу      .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.СвязьПоТипу           .ЦветТекста = ЦветРежимЗагрузкиИскать;
			ОформлениеСтроки.Ячейки.ЭлементСвязиПоТипу    .ЦветТекста = ЦветРежимЗагрузкиИскать;
		КонецЕсли;
	Иначе
		ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветРамки;
	КонецЕсли;
	ОформлениеСтроки.Ячейки.КолонкаИсточника.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.КолонкаПриемника.Видимость = Ложь;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТаблицыБД(Кнопка)
	
	Если Не ЗначениеЗаполнено(ПолноеИмяТаблицы) Тогда
		Возврат;
	КонецЕсли; 
	Ответ = Вопрос("Очистить существующие колонки и строки?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Истина);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийЗаполнитьИзТабличногоДокумента(Кнопка)
	
	Ответ = Вопрос("Очистить существующие колонки и строки?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	Иначе
		ОчиститьСуществующие = Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
	ОбновитьКолонкиТаблицыЗначений(ОчиститьСуществующие, Ложь);
	ОбновитьКолонкиТабличногоПоляТаблицыЗначений();
	
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗОчистить(Кнопка)
	
	ОчиститьСопоставлениеКолонокТЗ();

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	СписокВыбора = ТабличноеПоле.Колонки.СинонимКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника, ТабличноеПоле.ТекущиеДанные.СинонимКолонкиИсточника);
	Для Каждого СтрокаНесопоставленнойКолонки Из НесопоставленныеКолонкиТД Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.СинонимКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ТабличноеПоле = ЭлементыФормы.СопоставлениеКолонокТЗ;
	СписокВыбора = ТабличноеПоле.Колонки.ИмяКолонкиИсточника.ЭлементУправления.СписокВыбора;
	#Если Сервер И Не Сервер Тогда
	    СписокВыбора = Новый СписокЗначений;
	#КонецЕсли
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника, ТабличноеПоле.ТекущиеДанные.ИмяКолонкиИсточника);
	Для Каждого СтрокаНесопоставленнойКолонки Из НесопоставленныеКолонкиТД Цикл
		СписокВыбора.Добавить(СтрокаНесопоставленнойКолонки.ИмяКолонки, СтрокаНесопоставленнойКолонки.ИмяКолонки);
	КонецЦикла;
	СписокВыбора.СортироватьПоПредставлению();
		
КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗЗаполнитьПоСинонимам(Кнопка)
	
	СопоставлениеКолонокТЗЗаполнить();
	
КонецПроцедуры

// Такой странный прием позволил обойти проблему не создания колонок в таблиц значений реквизитов этой обработки (она сломана)
Процедура СинхронизироватьРеквизитыОбъекта()
	
	ЭтотОбъект.СопоставлениеКолонокБД = СопоставлениеКолонокБД;
	ЭтотОбъект.СопоставлениеКолонокТЗ = СопоставлениеКолонокТЗ;
	ЭтотОбъект.КолонкиТЗ = КолонкиТЗ;
	ЭтотОбъект.НесопоставленныеКолонкиТД = НесопоставленныеКолонкиТД;
	ЭтотОбъект.ТаблицаЗначений = ТаблицаЗначений;
	ЭтотОбъект.ТаблицаБД = ТаблицаБД;
	ЭтотОбъект.ТабличныйДокумент = ЭлементыФормы.ТабличныйДокумент;

КонецПроцедуры

Процедура КолонкиТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ВыбраннаяСтрока.ИмяКолонки];
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	
КонецПроцедуры

Процедура СопоставлениеКолонокТЗИмяКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокумента();
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура ОткрытьКолонкуТабличногоДокумента()
	
	НомерКолонки = Число(ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиИсточника);
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ПерваяСтрокаДанныхТабличногоДокумента, НомерКолонки, ПерваяСтрокаДанныхТабличногоДокумента, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;

КонецПроцедуры

Процедура СопоставлениеКолонокТЗСинонимКолонкиИсточникаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОткрытьКолонкуТабличногоДокумента();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НесопоставленныеКолонкиТДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	НомерКолонки = Число(ЭлементыФормы.НесопоставленныеКолонкиТД.ТекущиеДанные.ИмяКолонкиИсточника);
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ПерваяСтрокаДанныхТабличногоДокумента, НомерКолонки, ПерваяСтрокаДанныхТабличногоДокумента, НомерКолонки);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;

КонецПроцедуры

Процедура СопоставлениеКолонокТЗВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Ложь
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.ИмяКолонкиПриемника
		Или Колонка = ЭлементыФормы.СопоставлениеКолонокТЗ.Колонки.СинонимКолонкиПриемника
	Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяКолонка = ЭлементыФормы.ТаблицаЗначений.Колонки[ЭлементыФормы.СопоставлениеКолонокТЗ.ТекущиеДанные.ИмяКолонкиПриемника];
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	Иначе
		//ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСозданныеОбъектыКонсольОбработки(Кнопка)
	
	Ответ = Вопрос("Использовать значения текущей колонки (да) или ключи строк (нет)?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаБД);
	Иначе
		ирОбщий.ОткрытьОбъектыИзВыделенныхСтрокВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаБД, ПолноеИмяТаблицы);
	КонецЕсли;

КонецПроцедуры

Процедура ТаблицаЗначенийВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	//Если Колонка = ЭлементыФормы.ТаблицаЗначений.Колонки[мИмяКолонкиНомерСтроки] Тогда
	//	ПерейтиКСтрокеТабличногоДокументаИзСтрокиТаблицыЗначений();
	//КонецЕсли; 
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


Процедура КоманднаяПанельТаблицаЗначенийПерейтиКБД(Кнопка)
	
	Если ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыБД = ТаблицаБД.Найти(ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыБД <> Неопределено Тогда
		ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = СтрокаТаблицыБД;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийПерейтиКТД(Кнопка)
	
	Если ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ВыбраннаяСтрока = ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока;
	ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = ЭлементыФормы.ТабличныйДокумент.Область(ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], 1, ВыбраннаяСтрока[мИмяКолонкиНомерСтроки], 1);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура КоманднаяПанельТабличногоДокументаПерейтиКТЗ(Кнопка)
	
	Если ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначений.Найти(ЭлементыФормы.ТабличныйДокумент.ТекущаяОбласть.Верх, мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ТаблицаБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ТаблицаБД.Колонки[мИмяКолонкиНомерСтроки] Тогда
		ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДПерейти(Кнопка)
	
	ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД();
	
КонецПроцедуры

Процедура ПерейтиКСтрокеТаблицыЗначенийИзСтрокиТаблицыБД()
	
	Если ЭлементыФормы.ТаблицаБД.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если Ложь
		Или ТаблицаЗначений.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено 
		Или ТаблицаБД.Колонки.Найти(мИмяКолонкиНомерСтроки) = Неопределено
	Тогда
		Возврат;
	КонецЕсли; 
	СтрокаТаблицыЗначений = ТаблицаЗначений.Найти(ЭлементыФормы.ТаблицаБД.ТекущаяСтрока[мИмяКолонкиНомерСтроки], мИмяКолонкиНомерСтроки);
	Если СтрокаТаблицыЗначений <> Неопределено Тогда
		ЭлементыФормы.ТаблицаЗначений.ТекущаяСтрока = СтрокаТаблицыЗначений;
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаЗначений;
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельТаблицаЗначенийКонсольОбработки(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.ТаблицаЗначений);
	
КонецПроцедуры

Процедура КоманднаяПанельТаблицаБДЗагрузитьБезЗаписи(Кнопка)
	
	ЗагрузитьВТаблицуБД(Ложь);
	ЭлементыФормы.ТаблицаБД.СоздатьКолонки();
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.ТаблицаБД,, ирОбщий.ПолучитьПоляТаблицыМДЛкс(ПолноеИмяТаблицы),, Истина);
	ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.ТаблицаБД;
	
КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокБД.ТекущиеДанные;
	СвязьПоВладельцу = ТекущиеДанные.СвязьПоВладельцу;
	Если ТипЗНЧ(СвязьПоВладельцу) = Тип("Строка") Тогда
		СтрокаСвязиПоВладельцу = СопоставлениеКолонокБД.Найти(СвязьПоВладельцу, "ИмяРеквизита");
		Если Не СтрокаСвязиПоВладельцу = Неопределено Тогда
			СвязьПоВладельцу = СтрокаСвязиПоВладельцу.ЗначениеПоУмолчанию;
		Иначе
			СвязьПоВладельцу = Неопределено;
		КонецЕсли;
	КонецЕсли;
	Элемент.ВыборПоВладельцу = СвязьПоВладельцу;

КонецПроцедуры

Процедура СопоставлениеКолонокБДЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.СопоставлениеКолонокБД.ТекущиеДанные;
	ТекущиеДанные.ЗначениеПоУмолчанию = ТекущиеДанные.ОписаниеТиповПриемника.ПривестиЗначение(Неопределено);
	СтандартнаяОбработка = Ложь;	
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДУстановитьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокБД, , Истина);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДСнятьФлажки(Кнопка)
	
	//Для каждого ЗагружаемыйРеквизит Из СопоставлениеКолонокБД Цикл
	//	Если Ложь
	//		//Или Не РежимКонвертации = 2 
	//		Или Не ЗагружаемыйРеквизит.МожетБытьПолемПоиска 
	//	Тогда
	//		ЗагружаемыйРеквизит.Пометка = Ложь;
	//	КонецЕсли;
	//КонецЦикла;
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.СопоставлениеКолонокБД, , Ложь);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДАлгоритмПередЗаписьюОбъекта(Кнопка)
	
	ПараметрыАлгоритма = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмПередЗаписьюОбъекта"),,,, Истина);
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	мПлатформа.РедактироватьАлгоритм(АлгоритмПередЗаписьюОбъекта, ПараметрыАлгоритма);
	
КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДАлгоритмПриЗаписиОбъекта(Кнопка)
	
	ПараметрыАлгоритма = ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ПолучитьМакет("АлгоритмПриЗаписиОбъекта"),,,, Истина);
	#Если Сервер И Не Сервер Тогда
	    мПлатформа = Обработки.ирПлатформа.Создать();
	#КонецЕсли
	мПлатформа.РедактироватьАлгоритм(АлгоритмПриЗаписиОбъекта, ПараметрыАлгоритма);

КонецПроцедуры

Процедура СопоставлениеКолонокБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура КП_СопоставлениеКолонокТаблицыБДРедакторОбъектаБДЯчейки(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.СопоставлениеКолонокБД);

КонецПроцедуры

Процедура КоманднаяПанельСопоставлениеКолонокТЗРедакторОбъектаБДЯчейки(Кнопка)
	
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ЭлементыФормы.СопоставлениеКолонокТЗ);

КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирЗагрузкаТабличныхДанных.Форма.Форма");

СинхронизироватьРеквизитыОбъекта();
//