Перем мНеПодключеныОбработки Экспорт;
Перем мВнешниеМодули;
Перем мКаталогОбработки Экспорт;
//Перем мКлючОбъектаДляСохраненияОбъектовОтладки Экспорт;
Перем мКартинки;
Перем мПолучениеФорм;
Перем мИмяСервера;
//Перем ирКЭШ_СловарьШаблоновМетаданных Экспорт;
//Перем ирКЭШ_СтруктураХраненияБД Экспорт;
//Перем ирКЭШ_КомпоновщикТаблицыМетаданных Экспорт;
//Перем ирКЭШ_ирАнализТехножурнала Экспорт;
Перем VBScript;
Перем мВерсия Экспорт;
Перем мСоответствиеРасположенийОкна Экспорт;

Процедура ДобавитьСвязиВнешнихМодулей()
	
	Для А = 0 По мВнешниеМодули.ВГраница() Цикл
		Для Б = 0 По мВнешниеМодули.ВГраница() Цикл		
			Если Б = А Тогда
				Продолжить;
			КонецЕсли; 
			ЭтотОбъект[мВнешниеМодули[А]][мВнешниеМодули[Б]] = ЭтотОбъект[мВнешниеМодули[Б]];
		КонецЦикла;
		//ЭтотОбъект[мВнешниеМодули[А]]["ирМобильный"] = ЭтаФорма;
	КонецЦикла;
	
КонецПроцедуры

Процедура Деструктор() Экспорт
	
	ирКэш.ирПлатформа.ирКэш = Неопределено;
	ирКэш.ирПлатформа = Неопределено;
	Для А = 0 По мВнешниеМодули.ВГраница() Цикл
		Для Б = 0 По мВнешниеМодули.ВГраница() Цикл
			Если Б = А Тогда
				Продолжить;
			КонецЕсли; 
			//Попытка
				ЭтотОбъект[мВнешниеМодули[А]][мВнешниеМодули[Б]] = Неопределено;
			//Исключение
			//КонецПопытки;
		КонецЦикла;
		//Попытка
			ЭтотОбъект[мВнешниеМодули[А]]["ирМобильный"] = Неопределено;
		//Исключение
		//КонецПопытки; 
	КонецЦикла;
	мВнешниеМодули.Очистить();
	
КонецПроцедуры  

Функция ПолучитьНастройкиПоУмолчанию()
	
	Результат = Новый Структура;
	Результат.Вставить("РасположениеПанелиЗапуска", РасположениеПанелиЗапуска); 
	Результат.Вставить("ОпределениеСерверногоВремени", 1); 
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьНастройки() Экспорт
	
	Результат = ПолучитьНастройкиПоУмолчанию();
	ПутьКФайлу = ПолучитьПолноеИмяФайлаНастроек();
	ФайлНастроек = Новый Файл(ПутьКФайлу);
	Если НЕ ФайлНастроек.Существует() Тогда
		Возврат Результат;
	КонецЕсли; 
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.Прочитать(ПутьКФайлу);
	СтрокаXML = ТекстовыйДокумент.ПолучитьТекст();
	Результат = ирОбщий.ВосстановитьОбъектИзСтрокиXMLЛкс(СтрокаXML);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолноеИмяФайлаНастроек() Экспорт
	
	ПолноеИмяФайла = мКаталогОбработки + "DevToolSettings.xml";
	Возврат ПолноеИмяФайла;

КонецФункции

Процедура ЗаписатьНастройки(СтруктураНастроек) Экспорт
	
	Попытка
		ПутьКФайлу = ПолучитьПолноеИмяФайлаНастроек();
		CтрокаXML = ирОбщий.СохранитьОбъектВВидеСтрокиXMLЛкс(СтруктураНастроек);
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.УстановитьТекст(CтрокаXML);
		ТекстовыйДокумент.Записать(ПутьКФайлу);
	Исключение
		ВызватьИсключение "Не удалось записать настройки в файл " + ПутьКФайлу + ": " + ОписаниеОшибки(); 
	КонецПопытки;
	НастройкиИнструментов.Очистить();
	Для Каждого КлючИЗначение Из СтруктураНастроек Цикл
		НастройкиИнструментов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры
  
Функция ТекстСкриптаПолученияВремени()

	Текст =
	"Function GetServerTime(ServerName) 
	|	Set objWMIService = GetObject(""winmgmts:\\"" & ServerName & ""\root\cimv2"") 
	|	Set colItems = objWMIService.ExecQuery(""Select * from Win32_LocalTime"") 
	|	zeroString = ""0""
	|	For Each objItem in colItems
	|		year_ = CStr(objItem.Year)
	|       If len(year_) < 4 Then
	|			year = String(zeroString, 4 - len(year_)) + year_
	|       End If
	|		month_ = CStr(objItem.Month)
	|       If len(month_) = 1 Then
	|			month_ = zeroString + month_
	|       End If
	|		day_ = CStr(objItem.Day)
	|       If len(day_) = 1 Then
	|			day_ = zeroString + day_
	|       End If
	|		hour_ = CStr(objItem.Hour)
	|       If len(hour_) = 1 Then
	|			hour_ = zeroString + hour_
	|       End If
	|		minute_ = CStr(objItem.Minute)
	|       If len(minute_) = 1 Then
	|			minute_ = zeroString + minute_
	|       End If
	|		second_ = CStr(objItem.Second)
	|       If len(second_) = 1 Then
	|			second_ = zeroString + second_
	|       End If    
	|
	|		GetServerTime = CStr(year_) & CStr(month_) & CStr(day_) & CStr(hour_) & CStr(minute_) & CStr(second_)
	|		'Exit Function
	|	Next
	|End Function";
	
	Возврат Текст;

КонецФункции // ТекстСкриптаПолученияВремени() 

Функция ПолучитьТекущуюДатуСервера() Экспорт
	
	Если ирКЭШ.Получить().ЭтоФайловаяБаза Или НастройкиИнструментов.ОпределениеСерверногоВремени = 1 Тогда
		Возврат ТекущаяДата();
	ИначеЕсли НастройкиИнструментов.ОпределениеСерверногоВремени = 2 Тогда 
		Возврат ПолучитьОперативнуюОтметкуВремени();
	ИначеЕсли НастройкиИнструментов.ОпределениеСерверногоВремени = 3 Тогда 
		Попытка
			Возврат Дата(VBScript.Run("GetServerTime", мИмяСервера));			
		Исключение
			ВызватьИсключение "Не удалось получить время сервера с помощью скрипта! Выберите другую опцию получения серверного времени в настройках инструментов!";		
		КонецПопытки;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли; 
	
КонецФункции

//Процедура ОчиститьКЭШ() Экспорт
//	
//	ирКЭШ_КомпоновщикТаблицыМетаданных.Очистить();
//	ирКЭШ_СловарьШаблоновМетаданных.Очистить();
//	ирКЭШ_СтруктураХраненияБД.Очистить();
//	ирКЭШ_ирАнализТехножурнала = Неопределено;
//	
//КонецПроцедуры   
	
////////////////////////////////////////////////////////////////////////////////
//	Популярные функции для вызова из отладчика

//Открытие консолей
Функция ОткрытьКонсольЗапросовДляОтладки(Запрос, ТипЗапроса = "Обычный", ИмяЗапроса = "Запрос для отладки", Модально = Истина) Экспорт
	
	Результат = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольЗапросов").ОткрытьДляОтладки(Запрос, ТипЗапроса, ИмяЗапроса, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть();
	#Иначе   		
		Деструктор();
	#КонецЕсли

	Возврат Результат;
	
КонецФункции 

Функция ОткрытьКонсольКомпоновокДляОтладки(СхемаКомпоновки, Настройки = Неопределено, ВнешниеНаборыДанных = Неопределено,
	Модально = Истина) Экспорт
	
	Результат = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Отчет.ирКонсольКомпоновокДанных").ОткрытьДляОтладки(СхемаКомпоновки, Настройки, ВнешниеНаборыДанных, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть();
	#Иначе   		
		Деструктор();
	#КонецЕсли

	Возврат Результат;
	
КонецФункции 

Функция ОткрытьКонсольПостроителейДляОтладки(ПостроительОтчета, Модально = Истина) Экспорт
	
	Результат = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольПостроителейОтчетов").ОткрытьДляОтладки(ПостроительОтчета, Модально);
	#Если Клиент Тогда 		
		ПолучитьФорму("Форма").Открыть();
	#Иначе   	
		Деструктор();		
	#КонецЕсли

	Возврат Результат;
	
КонецФункции

// получение списка обработок из файла настроек
Функция ПолучитьНастройкиИнструментовИзФайла() Экспорт
	
	НастройкиИзФайла = ПрочитатьНастройки();
	Если Истина
		И НастройкиИзФайла <> Неопределено 
		И НастройкиИзФайла.Свойство("СписокИнструментов")
	Тогда
		мТаблица = НастройкиИзФайла.СписокИнструментов;
		Возврат мТаблица;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

Процедура ЗаполнитьСписокИнструментовПользовательскиеНастройки() Экспорт
	
	// заполнение из файла настроек
	лНастройкиИнструментов = ПолучитьНастройкиИнструментовИзФайла();
	Если лНастройкиИнструментов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Для Каждого СтрокаНастройки Из лНастройкиИнструментов Цикл
		Если СтрокаНастройки.ПолноеИмя = "Разделитель" Тогда
			Продолжить;
		КонецЕсли; 
		СтрокаИнструмента = СписокИнструментов.Найти(СтрокаНастройки.ПолноеИмя);
		Если СтрокаИнструмента = Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(СтрокаИнструмента, СтрокаНастройки);
	КонецЦикла;
	
КонецПроцедуры

// заполнение списка обработок стандартными настройками
Процедура ЗаполнитьСписокИнструментовСтандартныеНастройки() Экспорт
	
	СписокИнструментов.Очистить();
	ТабличныйДокумент = ПолучитьМакет("СтандартныеНастройки");
	СписокИнструментов.Загрузить(ирОбщий.ПолучитьТаблицуИзТабличногоДокументаЛкс(ТабличныйДокумент,,,, Истина));
	
КонецПроцедуры

// функции преобразования
// булево из строки
Функция ПолучитьБулевоИзСтроки(Значение) Экспорт
	
	Результат = Ложь;
	Если Значение = "Да" Тогда
		Результат = Истина;
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

// число из строки
Функция ПолучитьЧислоИзСтроки(Значение) Экспорт
	
	Результат = 0;
	Попытка
		Результат = Число(Значение);
	Исключение
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// переоткрытие формы обработки
Процедура ПереоткрытьФорму(ЦелеваяФорма) Экспорт
	
	ЦелеваяФорма.Закрыть();
	ЭтотОбъект.ПолучитьФорму().Открыть();
	
КонецПроцедуры

Процедура ОсвободитьВсеИндикаторыПроцессов() Экспорт
	ПолучитьФорму().ОсвободитьВсеИндикаторыПроцессов_Форма();
КонецПроцедуры

// перед открытием формы
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ирКэш.ЛиМобильныйРежимЛкс() Тогда 
		СохранитьЗначение("ирПолноеИмяФайлаОсновногоМодуля", ЭтотОбъект.ИспользуемоеИмяФайла);
		//// очистка кэша
		//ПодключитьОбработчикОжидания("ОчиститьКЭШ_", 1200);
	КонецЕсли; 
	ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирМобильный.Форма.Форма");
	ЗаполнитьСписокИнструментовСтандартныеНастройки();
	ЗаполнитьСписокИнструментовПользовательскиеНастройки();
	Отказ = мНеПодключеныОбработки;
	
	//каждый раз будем сохранять с новым ключом, чтобы настройки не смогли восстановиться при следующим открытии
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	РазмерХ = 24;
	РазмерУ = 726;
	ШиринаПанели = 25;
	
	Если ЭтаФорма.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Верх ИЛИ ЭтаФорма.ПоложениеПрикрепленногоОкна = ВариантПрикрепленияОкна.Низ Тогда
		ЭлементыФормы.Удалить(ЭлементыФормы.КоманднаяПанельПравоЛево);
		ПанельКнопок = ЭлементыФормы.КоманднаяПанельВерхНиз;
		ЭтаФорма.Высота = ШиринаПанели;
		ПанельКнопок.Ширина = ЭтаФорма.Ширина - 10;
	Иначе
		ЭлементыФормы.Удалить(ЭлементыФормы.КоманднаяПанельВерхНиз);
		ПанельКнопок = ЭлементыФормы.КоманднаяПанельПравоЛево;
		ЭтаФорма.Ширина = ШиринаПанели;
		ПанельКнопок.Высота = ЭтаФорма.Высота - 10;
	КонецЕсли;	
	
	// заполним панель кнопками
	ПанельКнопок.Лево = 0;
	ПанельКнопок.Верх = 0;
	МассивКнопокАвтозапуска = Новый Массив;
	ЗаполнитьКнопкиПанели(ПанельКнопок,МассивКнопокАвтозапуска);
	// автозапуск
	Для Каждого Кнопка Из МассивКнопокАвтозапуска Цикл
		ПриНажатииКнопкиОбработки(Кнопка);
	КонецЦикла;
	
КонецПроцедуры

// закрытие формы
Процедура ПриЗакрытии()
	Деструктор();
КонецПроцедуры

// заполнение панели кнопками
Процедура ЗаполнитьКнопкиПанели(ПанельКнопок, МассивКнопокАвтозапуска = Неопределено)
	
	ПереданМассивАвтозапуска = (МассивКнопокАвтозапуска <> Неопределено);
	МассивКнопок = Новый Массив;
	Для Каждого Кнопка Из ПанельКнопок.Кнопки Цикл
		ИмяКнопки = Кнопка.Имя;
		Если Найти(ИмяКнопки,"Кнопка_") > 0 ИЛИ Найти(ИмяКнопки,"Кнопка_Разделитель") > 0 Тогда
			МассивКнопок.Добавить(Кнопка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Кнопка Из МассивКнопок Цикл
		ПанельКнопок.Кнопки.Удалить(Кнопка);
	КонецЦикла;
	
	Индекс = 0;
	Для Каждого Строка Из СписокИнструментов Цикл
		ПолноеИмя = Строка.ПолноеИмя;
		Автозапуск = Строка.Автозапуск;
		Если НЕ Строка.Видимость Тогда
			Продолжить;
		КонецЕсли;
		// разделитель
		Если ПолноеИмя = "Разделитель" Тогда
			ИмяКнопки 		= "Кнопка_Разделитель"+(Индекс+1);
			ТипКнопки 		= ТипКнопкиКоманднойПанели.Разделитель;
			НоваяКнопка 	= ПанельКнопок.Кнопки.Вставить(Индекс,ИмяКнопки,ТипКнопки);
			Индекс = Индекс + 1;
		// произвольная подключаемая обработка	
		Иначе	
			ИмяКнопки = "Кнопка_" + XMLСтрока(СписокИнструментов.Индекс(Строка));
			ТипКнопки = ТипКнопкиКоманднойПанели.Действие;
			Действие = Новый Действие("ПриНажатииКнопкиОбработки");
			НоваяКнопка = ПанельКнопок.Кнопки.Вставить(Индекс, ИмяКнопки, ТипКнопки,, Действие);
			НоваяКнопка.Картинка = ирОбщий.ПолучитьОбщуюКартинкуЛкс(Строка.ИмяКартинки);
			НоваяКнопка.Отображение = ОтображениеКнопкиКоманднойПанели.Картинка;
			НоваяКнопка.Подсказка = Строка.Синоним;
			Индекс = Индекс + 1;
			// при необходимости осуществим автозапуск обработки
			Если Автозапуск И ПереданМассивАвтозапуска Тогда
				МассивКнопокАвтозапуска.Добавить(НоваяКнопка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
	
// обработчик нажатия кнопки
Процедура ПриНажатииКнопкиОбработки(Кнопка)
	
	ИндексМодуля = СтрЗаменить(Кнопка.Имя, "Кнопка_", "");
	ИндексМодуля = Число(ИндексМодуля);
	СтрокаИнструмента = СписокИнструментов[ИндексМодуля];
	ОткрытьИнструмент(СтрокаИнструмента);
	
КонецПроцедуры	

Процедура ОткрытьИнструмент(СтрокаИнструмента) Экспорт
	
	Если мВнешниеМодули.Найти(ирОбщий.ПолучитьПервыйФрагментЛкс(СтрокаИнструмента.ПолноеИмя)) <> Неопределено Тогда
		Выполнить(СтрокаИнструмента.ПолноеИмя + "()");
	Иначе
		Форма = ирОбщий.ПолучитьФормуЛкс(СтрокаИнструмента.ПолноеИмя + ".Форма");
		Форма.Открыть();
	КонецЕсли; 

КонецПроцедуры


// сервисные кнопки
Процедура ПриНажатииСервиснойКнопки(Кнопка)
	
	ИмяКнопки = Кнопка.Имя;
	Если ИмяКнопки = "НастройкиИнструментов" Тогда
		ПолучитьФорму("ФормаНастроек").Открыть();
	ИначеЕсли ИмяКнопки = "ОПодсистеме" Тогда
		ирОбщий.ПанельИнструментовОПодсистемеЛкс(); 
	ИначеЕсли ИмяКнопки = "Закрыть" Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// параметры расположения формы панели кнопок
Процедура НастроитьПараметрыОткрытияФормы()
	
	РасположениеПанелиЗапуска = 1;
	Если ОбработкаОбъект.НастройкиИнструментов.Свойство("РасположениеПанелиЗапуска") Тогда
		Попытка
			РасположениеПанелиЗапуска = Число(ОбработкаОбъект.НастройкиИнструментов.РасположениеПанелиЗапуска);
		Исключение
		КонецПопытки;
	КонецЕсли;
	ЭтаФорма.ПоложениеПрикрепленногоОкна = мСоответствиеРасположенийОкна[РасположениеПанелиЗапуска];
	
КонецПроцедуры                   

//// очистка кэша
//Процедура ОчиститьКЭШ_()
//	
//	ЭтаФорма.ОчиститьКЭШ();
//	
//КонецПроцедуры

// обработка оповещения при сохранении настроек
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ирПолучитьБазовуюФорму" Тогда
		Параметр.Вставить("ирМобильный", ЭтаФорма);
	КонецЕсли; 
	Если Не Открыта() Тогда
		Возврат;
	КонецЕсли; 
	Если ИмяСобытия = "ИзменениеНастроек" Тогда
		// изменение положения окна (придется переоткрыть форму)
		Если ЭтаФорма.ПоложениеПрикрепленногоОкна <> мСоответствиеРасположенийОкна[РасположениеПанелиЗапуска] Тогда
			ПереоткрытьФорму(ЭтаФорма);
			Возврат;
		КонецЕсли;
		// перезаполнение кнопок
		Для Каждого ЭлементФормы Из ЭлементыФормы Цикл
			ИмяЭлемента = ЭлементФормы.Имя;
			Если Найти(ИмяЭлемента,"КоманднаяПанельПравоЛево") = 0 И Найти(ИмяЭлемента,"КоманднаяПанельВерхНиз") = 0 Тогда
				Продолжить;
			КонецЕсли;
			ПанельКнопок = ЭлементФормы;
		КонецЦикла;
		ЗаполнитьКнопкиПанели(ПанельКнопок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсвободитьВсеИндикаторыПроцессовЛкс() Экспорт
	
	ирОбщий.ОсвободитьВсеИндикаторыПроцессовЛкс();
	
КонецПроцедуры

Функция СтрокиРавныЛкс(Знач Строка1, Знач Строка2, СУчетомРегистра = Ложь, БезПравыхНепечатныхСимволов = Ложь) Экспорт
	
	Если Не СУчетомРегистра Тогда
		Строка1 = НРег(Строка1);
		Строка2 = НРег(Строка2);
	КонецЕсли; 
	Если БезПравыхНепечатныхСимволов Тогда
		Строка1 = СокрП(Строка1);
		Строка2 = СокрП(Строка2);
	КонецЕсли; 
	Результат = Строка1 = Строка2;
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПолноеИмяФайлаМобильногоОбъектаМетаданныхЛкс(ИмяОбъекта, ТипМетаданных = "Обработка") Экспорт

	Если Ложь
		Или СтрокиРавныЛкс(ТипМетаданных, "Обработка") 
		Или СтрокиРавныЛкс(ТипМетаданных, "ВнешняяОбработка")
	Тогда
		Расширение = "epf";
	ИначеЕсли Ложь
		Или СтрокиРавныЛкс(ТипМетаданных, "Отчет") 
		Или СтрокиРавныЛкс(ТипМетаданных, "ВнешнийОтчет")
	Тогда
		Расширение = "erf";
	Иначе
		ВызватьИсключение "Тип метаданных """ + ТипМетаданных + """ не поддерживается";
	КонецЕсли;
	Если ИмяОбъекта = Метаданные().Имя Тогда
		Результат = мКаталогОбработки + "" + ИмяОбъекта + "." + Расширение;
	Иначе
		Результат = мКаталогОбработки + "Модули\" + ИмяОбъекта + "." + Расширение;
	КонецЕсли; 
	Возврат Результат;

КонецФункции

Функция ПолучитьОбщийМодульЛкс(Имя, ДобавитьСсылкиНаВнешниеМодули = Истина) Экспорт
	
	Результат = ЭтотОбъект[Имя];
	Если Результат = Неопределено Тогда
		ПолнояИмяФайла = ПолучитьПолноеИмяФайлаМобильногоОбъектаМетаданныхЛкс(Имя);
		Результат = ВнешниеОбработки.Создать(ПолнояИмяФайла);
	КонецЕсли; 
	Если ДобавитьСсылкиНаВнешниеМодули Тогда
		Для Каждого ИмяМодуля Из мВнешниеМодули Цикл
			Попытка
				Результат[ИмяМодуля] = ЭтотОбъект[ИмяМодуля];
			Исключение
			КонецПопытки; 
		КонецЦикла;
	КонецЕсли;
	Попытка
		Результат["ирМобильный"] = ЭтаФорма;
	Исключение
	КонецПопытки; 
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМенеджерТипаМетаданныхЛкс(ТипМетаданных) Экспорт

	Если Ложь
		Или СтрокиРавныЛкс(ТипМетаданных, "Обработка") 
		Или СтрокиРавныЛкс(ТипМетаданных, "ВнешняяОбработка")
	Тогда
		Менеджер = ВнешниеОбработки;
	ИначеЕсли Ложь
		Или СтрокиРавныЛкс(ТипМетаданных, "Отчет") 
		Или СтрокиРавныЛкс(ТипМетаданных, "ВнешнийОтчет")
	Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		ВызватьИсключение "Тип метаданных """ + ТипМетаданных + """ не поддерживается";
	КонецЕсли;
	Возврат Менеджер;

КонецФункции

Функция ПолучитьЦветСтиляЛкс(ИмяЦвета) Экспорт
	
	Если ИмяЦвета = "ирТекстИнформационнойНадписи" Тогда
		Возврат Новый Цвет(83, 106, 194);
	ИначеЕсли ИмяЦвета = "ирЦветФонаЧередованияСтрок" Тогда 
		Возврат WebЦвета.МятныйКрем;
	ИначеЕсли ИмяЦвета = "ирЦветФонаВычисляемогоЗначения" Тогда 
		Возврат WebЦвета.ГолубойСКраснымОттенком;
	ИначеЕсли ИмяЦвета = "ирЦветФонаОшибки" Тогда 
		Возврат Новый Цвет(255, 245, 245); 
	ИначеЕсли ИмяЦвета = "ирЦветФонаРасширенногоПредставленияЗначения" Тогда 
		Возврат Новый Цвет(255, 255, 180); 
	Иначе
		Возврат Новый Цвет();
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьФормуЛкс(ИмяФормы, Параметры = Неопределено, Владелец = Неопределено, Уникальность = Неопределено, Окно = Неопределено) Экспорт
	
	Возврат мПолучениеФорм.ПолучитьФормуЛкс(ИмяФормы, Параметры, Владелец, Уникальность, Окно);
	
КонецФункции

Функция ПолучитьОбщуюКартинкуЛкс(ИмяКартинки) Экспорт
	
	Попытка
		Картинка = БиблиотекаКартинок[ИмяКартинки];
	Исключение
		Картинка = мКартинки.Рисунки[ИмяКартинки].Картинка;
	КонецПопытки;
	Возврат Картинка;
	
КонецФункции


//////////////////////////////////////////////
// Глобальные методы


// соответствие расположений окна
мСоответствиеРасположенийОкна = Новый Соответствие;
мСоответствиеРасположенийОкна.Вставить(0, ВариантПрикрепленияОкна.Лево);
мСоответствиеРасположенийОкна.Вставить(1, ВариантПрикрепленияОкна.Лево);
мСоответствиеРасположенийОкна.Вставить(2, ВариантПрикрепленияОкна.Право);
мСоответствиеРасположенийОкна.Вставить(3, ВариантПрикрепленияОкна.Верх);
мСоответствиеРасположенийОкна.Вставить(4, ВариантПрикрепленияОкна.Низ);

мВнешниеМодули = Новый Массив();
мВнешниеМодули.Добавить("ирКэш");
мВнешниеМодули.Добавить("ирОбщий");
мВнешниеМодули.Добавить("ирПривилегированный");
мВнешниеМодули.Добавить("ирСервер");
мВнешниеМодули.Добавить("ирМобильный");

//ирМобильный #Если _ Тогда
	// В конфигурации нужно, чтобы форма при создании не вызывала исключение
	мКаталогОбработки = ирКэш.Получить().КаталогФайловогоКэша + "\"; 
	Перейти ~Конец;
//ирМобильный #КонецЕсли

Если Ложь Тогда 
	Пр(1);  // Ошибка компиляции здесь свидетельствует о том, что в модуле отсутствуют подмены глобальных методов подсистемы для отладки
КонецЕсли;
тмпФайл = Новый Файл(ЭтотОбъект.ИспользуемоеИмяФайла);
мКаталогОбработки = тмпФайл.Путь;

ирМобильный = ЭтаФорма;
Попытка
	ирКэш = ПолучитьОбщийМодульЛкс("ирКэш", Ложь);
	ирОбщий = ПолучитьОбщийМодульЛкс("ирОбщий", Ложь);
	ирСервер = ПолучитьОбщийМодульЛкс("ирСервер", Ложь);
	ирПривилегированный = ПолучитьОбщийМодульЛкс("ирПривилегированный", Ложь);
	//ирПлатформа = ПолучитьОбщийМодульЛкс("ирПлатформа");
	мНеПодключеныОбработки = Ложь;
	ДобавитьСвязиВнешнихМодулей();
	
	//ирКаталогАлгоритмов = мКаталогОбработки + "Алгоритмы\";
	//мКлючОбъектаДляСохраненияОбъектовОтладки = "ирИнструментыРазработчикаМобильные-ирОбъектыДляОтладки";
	мКартинки = ПолучитьМакет("ОбщиеКартинки");
	мПолучениеФорм = ПолучитьФорму("ПолучениеФорм");
	мИмяСервера = НСтр(СтрокаСоединенияИнформационнойБазы(), "Srvr");
	Если мИмяСервера <> "" Тогда
		мИмяСервера = ирОбщий.ПолучитьПервыйФрагментЛкс(мИмяСервера, ",");	
		мИмяСервера = ирОбщий.ПолучитьПервыйФрагментЛкс(мИмяСервера, ":");
	КонецЕсли;                     

	Попытка
		VBScript = Новый COMОбъект("MSScriptControl.ScriptControl");
		VBScript.language = "vbscript";
		VBScript.AddCode(ТекстСкриптаПолученияВремени());
	Исключение
		VBScript = Неопределено;
	КонецПопытки;

	//ирКЭШ_СловарьШаблоновМетаданных = Новый Соответствие;
	//ирКЭШ_СтруктураХраненияБД = Новый Соответствие;
	//ирКЭШ_КомпоновщикТаблицыМетаданных = Новый Соответствие;

	мВерсия = "3.05.1";
Исключение
	мНеПодключеныОбработки = Истина;
	Деструктор();
	ВызватьИсключение; 
КонецПопытки;
~Конец:

Попытка
	ЭтотОбъект.НастройкиИнструментов = ПрочитатьНастройки();
Исключение
	ЭтотОбъект.НастройкиИнструментов = Новый Структура;
	Сообщить(ОписаниеОшибки());
КонецПопытки;
НастроитьПараметрыОткрытияФормы();
