Перем ЦветФонаСтрокиНеограниченноДлины;
Перем ИдентификаторСсылки;
Перем мЭтоДокумент;
Перем мЭтоПланОбмена;
Перем мЭтоСсылочныйОбъект;
Перем мЭтоКонстанта;
Перем мПлатформа;
Перем мСтрокаТипаТабличнойЧасти;
Перем мВыборкаРезультатаСтрокиТаблицы;
Перем мМетаданныеОбъекта;
Перем мПрефиксИмениТабличногоПоляТЧ;
Перем мЭтоГруппа;
Перем мБазовоеКоличествоСтраницПанелиТЧ;

Процедура ОбновлениеОтображения()
	
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	
КонецПроцедуры

Функция ЗаполнитьСтрокуТзРеквизиты(Значение, ИмяРеквизита, Представление="", ОписаниеТипа = Неопределено, ТолькоПросмотр = Ложь, ДанныеИзБД = Истина)
	
	строкаТзРеквизиты = РеквизитыТаблица.Добавить();
	строкаТзРеквизиты.ИмяРеквизита = ИмяРеквизита;
	строкаТзРеквизиты.ПредставлениеРеквизита = Представление;
	Если Нрег(ИмяРеквизита) = Нрег("Ссылка") Тогда
		ЗначениеРеквизита = Значение.УникальныйИдентификатор();
	Иначе
		ЗначениеРеквизита = Значение[ИмяРеквизита];
	КонецЕсли; 
	строкаТзРеквизиты.ЗначениеРеквизита = ЗначениеРеквизита;
	строкаТзРеквизиты.ОригинальноеЗначениеРеквизита = ЗначениеРеквизита;
	строкаТзРеквизиты.ТипЗначения = ТипЗнч(ЗначениеРеквизита);
	строкаТзРеквизиты.ОписаниеТипов = ОписаниеТипа;
	Если Нрег(ИмяРеквизита) = Нрег("Ссылка") Тогда
		строкаТзРеквизиты.РазрешеноИзменение = Истина
			И Не ТолькоПросмотр;
	Иначе
		строкаТзРеквизиты.РазрешеноИзменение = Истина
			И Не ТолькоПросмотр
			И строкаТзРеквизиты.ЗначениеРеквизита = ЗначениеРеквизита;
	КонецЕсли; 
	Если строкаТзРеквизиты.РазрешеноИзменение Тогда
		строкаТзРеквизиты.ПризнакМодификации = Не ДанныеИзБД;
	КонецЕсли; 
	Возврат строкаТзРеквизиты;
	
КонецФункции

Процедура ДоступностьКнопок()
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = мЭтоСсылочныйОбъект и ЗначениеЗаполнено(ВыбОбъект);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПометитьНаУдаление.Доступность = мЭтоСсылочныйОбъект и ЗначениеЗаполнено(ВыбОбъект);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Перечитать.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Провести.Доступность = мЭтоДокумент И ЗначениеЗаполнено(ВыбОбъект);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.СделатьНепроведённым.Доступность = мЭтоДокумент И ЗначениеЗаполнено(ВыбОбъект);
	//ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Текст = "Записать " + ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница.Заголовок;
	Если ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения Тогда
		ПодсказкаКнопки = "Записать движения";
	Иначе
		ПодсказкаКнопки = "Записать все";
	КонецЕсли; 
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Текст = ПодсказкаКнопки;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Подсказка = ПодсказкаКнопки;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Пояснение = ПодсказкаКнопки;
	
	АктивнаСтраницаИзменяемыхДанных = Ложь
		Или ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта
		Или ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.ВТаблицу.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы) И АктивнаСтраницаИзменяемыхДанных;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.ИзТаблицы.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы) И АктивнаСтраницаИзменяемыхДанных;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.МенеджерТабличногоПоля.Доступность = ПолучитьТекущееТабличноеПоле() <> Неопределено И ЭлементыФормы.ПанельОбъекта.Доступность;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.РедакторОбъектаБДЯчейки.Доступность = ПолучитьТекущееТабличноеПоле() <> Неопределено И ЭлементыФормы.ПанельОбъекта.Доступность;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.ИзменитьИдентификатор.Доступность = мЭтоСсылочныйОбъект и ЗначениеЗаполнено(ВыбОбъект);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.УдалитьСКонтролемСсылок.Доступность = мЭтоСсылочныйОбъект и ЗначениеЗаполнено(ВыбОбъект);
	
КонецПроцедуры

Процедура УстановитьОтображениеЗакладок(Панель)
	
	Если Панель.Страницы.Количество() < 2 Тогда
		Панель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	Иначе
		Панель.Страницы.Удалить(0);
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьСтраницыДвижений(Объект)
	
	ТекущаяСтрока = ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		КлючСтрокиРегистра = Новый Структура("ТипРегистра, Имя");
		ЗаполнитьЗначенияСвойств(КлючСтрокиРегистра, ТекущаяСтрока); 
	КонецЕсли; 
	ОчиститьСтруктурыНаборовДвижений();
	Если Ложь
		Или Не ЛиЧитатьПисатьДвижения 
		Или Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) 
		Или Объект = Неопределено
	Тогда
		Возврат
	КонецЕсли;
	мдОбъекта = Объект.Метаданные();
	ОбъектыМД = ирОбщий.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(мдОбъекта, Истина, Истина);
	ПанельТипаМетаданных = ЭлементыФормы.Движения;
	ТабличноеПолеСтраниц = ЭлементыФормы.СтраницыДвижения;
	ТаблицаСтраниц = ТабличноеПолеСтраниц.Значение;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ОбъектыМД.Количество(), "Подготовка страниц движений");
	Для Каждого МетаРегистр из ОбъектыМД Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ИмяТаблицыБДРегистра = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(МетаРегистр);
		//ИмяТипаРегистра = ирОбщий.ПолучитьТипТаблицыБДЛкс(ИмяТаблицыБДРегистра);
		ИмяТипаРегистра = ирОбщий.ПолучитьКорневойТипКонфигурацииЛкс(ИмяТаблицыБДРегистра);
		ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
		СтрокаСтраницы = ТаблицаСтраниц.Добавить();
		СтрокаСтраницы.ИмяСтраницы = ИмяТаблицыРегистра;
		СтрокаСтраницы.Имя = МетаРегистр.Имя;
		СтрокаСтраницы.ПолноеИмя = МетаРегистр.ПолноеИмя();
		СтрокаСтраницы.Представление = МетаРегистр.Представление();
		СтрокаСтраницы.ТипРегистра = ИмяТипаРегистра;
		НоваяСтраница = ПанельТипаМетаданных.Страницы.Добавить(ИмяТаблицыРегистра, МетаРегистр.Представление());
		ПанельТипаМетаданных.ТекущаяСтраница = НоваяСтраница;
		ТабличноеПолеНабораДвижений = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), ИмяТаблицыРегистра, Истина, ПанельТипаМетаданных);
		ТабличноеПолеНабораДвижений.Высота = ПанельТипаМетаданных.Высота-4;
		ТабличноеПолеНабораДвижений.Ширина = ПанельТипаМетаданных.Ширина-4;
		ТабличноеПолеНабораДвижений.Верх = 2;
		ТабличноеПолеНабораДвижений.Лево = 2;
		ТабличноеПолеНабораДвижений.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
		ТабличноеПолеНабораДвижений.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ПанельТипаМетаданных, ГраницаЭлементаУправления.Низ);
		ТабличноеПолеНабораДвижений.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПанельТипаМетаданных, ГраницаЭлементаУправления.Право);
		НаборДвижений = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяТаблицыБДРегистра);
		ТабличноеПолеНабораДвижений.Значение = НаборДвижений.Выгрузить();
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ТаблицаСтраниц.Сортировать("ТипРегистра, Представление");
	Если ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = Неопределено Тогда
		Если ТаблицаСтраниц.Количество() > 0 Тогда
			ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = ТаблицаСтраниц[0];
		КонецЕсли; 
	КонецЕсли; 
	УстановитьОтображениеЗакладок(ЭлементыФормы.Движения);
	Если КлючСтрокиРегистра <> Неопределено Тогда
		НайденныеСтроки = СтраницыДвижений.НайтиСтроки(КлючСтрокиРегистра);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗагрузитьТаблицыДвижений(Объект)
	
	Если Ложь
		Или Не ЛиЧитатьПисатьДвижения 
		Или Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) 
		Или Объект = Неопределено
	Тогда
		Возврат
	КонецЕсли;
	мдОбъекта = Объект.Метаданные();
	ОбъектыМД = ирОбщий.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(мдОбъекта, Истина, Истина);
	ПанельТипаМетаданных = ЭлементыФормы.Движения;
	ТабличноеПолеСтраниц = ЭлементыФормы.СтраницыДвижения;
	ТаблицаСтраниц = ТабличноеПолеСтраниц.Значение;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ОбъектыМД.Количество(), "Загрузка движений");
	Для Каждого МетаРегистр из ОбъектыМД Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ПолноеИмяМДНабораЗаписей = МетаРегистр.ПолноеИмя();
		ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
		ТабличноеПолеНабораДвижений = ЭлементыФормы.Найти(ИмяТаблицыРегистра);
		ИмяТаблицыБДРегистра = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(МетаРегистр);
		НаборДвижений = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяТаблицыБДРегистра);
		НаборДвижений.Отбор[0].Установить(ВыбОбъект);
		НаборДвижений.Прочитать();
		ТабличноеПолеНабораДвижений.Значение = НаборДвижений.Выгрузить();
		ТабличноеПолеНабораДвижений.Значение.Колонки.Удалить(НаборДвижений.Отбор[0].Имя);
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	ОтобратьСтраницыРегистров();
	
КонецПроцедуры

Процедура ВыбОбъектПриИзменении(Элемент = Неопределено)
	
	Если Элемент <> Неопределено Тогда
		// Антибаг платформы 8.2.16 http://partners.v8.1c.ru/forum/thread.jsp?id=1077270#1077270
		Элемент.Значение = Элемент.Значение;
	КонецЕсли;
	//ПеречитатьДанные = Истина;
	Если ТипЗнч(ВыбОбъект) <> Тип("Строка") Тогда
		Если ЭтаФорма.ИмяОсновнойТаблицы <> ВыбОбъект.Метаданные().ПолноеИмя() Тогда
			ЭтаФорма.ИмяОсновнойТаблицы = ВыбОбъект.Метаданные().ПолноеИмя();
			ИмяОсновнойТаблицыПриИзменении();
			//ПеречитатьДанные = Ложь;
		КонецЕсли; 
	КонецЕсли; 
	//Если ПеречитатьДанные Тогда
		мПеречитатьДанные();
	//КонецЕсли; 
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
Процедура мПоместитьДанныеВТЧ(Объект, ИмяТЧ)

	тчНаФорме = ЭлементыФормы[мПрефиксИмениТабличногоПоляТЧ + ИмяТЧ].Значение;
	тчОбъекта = Объект[ИмяТЧ];
	КолонкиТЧ = тчОбъекта.ВыгрузитьКолонки().Колонки;
	КолонкиТЧ.Удалить("НомерСтроки");
	Если Истина
		И Метаданные.ПланыСчетов.Индекс(Объект.Метаданные()) >= 0
		И ирОбщий.СтрокиРавныЛкс(ИмяТЧ, "ВидыСубконто")
	Тогда
		КолонкиТЧ.Удалить("Предопределенное");
	КонецЕсли;
	Если Истина
		И Метаданные.ПланыВидовРасчета.Индекс(Объект.Метаданные()) >= 0
		И (Ложь
			Или ирОбщий.СтрокиРавныЛкс(ИмяТЧ, "БазовыеВидыРасчета")
			Или ирОбщий.СтрокиРавныЛкс(ИмяТЧ, "ВедущиеВидыРасчета")
			Или ирОбщий.СтрокиРавныЛкс(ИмяТЧ, "ВытесняющиеВидыРасчета"))
	Тогда
		КолонкиТЧ.Удалить("Предопределенный");
	КонецЕсли;
	тчОбъекта.Очистить();
	Для Каждого СтрокаТчНаФорме Из тчНаФорме Цикл
		СтрокаОбъекта = тчОбъекта.Добавить();
		Для Каждого КолонкаТч Из КолонкиТЧ Цикл
			СтрокаОбъекта[КолонкаТч.Имя] = СтрокаТчНаФорме[КолонкаТч.Имя];
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // мПоместитьДанныеВТЧ()

// <Описание функции>
//
// Параметры:
//  <Параметр1>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>;
//  <Параметр2>  – <Тип.Вид> – <описание параметра>
//                 <продолжение описания параметра>.
//
// Возвращаемое значение:
//               – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>;
//  <Значение2>  – <Тип.Вид> – <описание значения>
//                 <продолжение описания значения>.
//
Функция мДобавитьСтраницуТЧ(Объект, ИмяТЧ, ПредставлениеТЧ)

	ИмяТаблицыТЧ = мПрефиксИмениТабличногоПоляТЧ + ИмяТЧ;
	НоваяСтраница = ЭлементыФормы.панельТабличныеЧасти.Страницы.Добавить(ИмяТаблицыТЧ, ПредставлениеТЧ, , ирОбщий.ПолучитьОбщуюКартинкуЛкс("ирТабличнаяЧасть"));
	ЭлементыФормы.панельТабличныеЧасти.ТекущаяСтраница = НоваяСтраница;
	тчНаФорме = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), ИмяТаблицыТЧ, Истина, ЭлементыФормы.панельТабличныеЧасти);
	тчНаФорме.АвтоКонтекстноеМеню = Истина;
	тчНаФорме.ИзменяетДанные = Истина;
	тчНаФорме.Доступность = Истина;
	тчНаФорме.Высота = ЭлементыФормы.панельТабличныеЧасти.Высота - 30;
	тчНаФорме.Ширина = ЭлементыФормы.панельТабличныеЧасти.Ширина - 8;
	тчНаФорме.Верх = 4;
	тчНаФорме.Лево = 4;
	тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.панельТабличныеЧасти ,ГраницаЭлементаУправления.Низ);
	тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.панельТабличныеЧасти, ГраницаЭлементаУправления.Право);
	тчНаФорме.ТолькоПросмотр = Ложь;
	тчНаФорме.ИзменятьСоставСтрок = Истина;
	тчНаФорме.ИзменятьПорядокСтрок = Истина;
	тчНаФорме.Доступность = Истина;
	тчНаФорме.РежимВыделения = РежимВыделенияТабличногоПоля.Множественный;
	тчНаФорме.Значение = Новый ТаблицаЗначений;
	ТабличнаяЧасть = Объект[ИмяТЧ];
	тчНаФорме.Значение = ТабличнаяЧасть.Выгрузить();
	тчНаФорме.СоздатьКолонки();
	Если тчНаФорме.Значение.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
		тчНаФорме.Колонки.НомерСтроки.Данные = "";
		тчНаФорме.Колонки.НомерСтроки.ТолькоПросмотр = Истина;
	КонецЕсли; 
	ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(тчНаФорме);
	ПодключитьОбработчикиСобытийПолейВводаКолонокТабличногоПоля(тчНаФорме);
	тчНаФорме.УстановитьДействие("ПриВыводеСтроки", Новый Действие("НаборЗаписейПриВыводеСтроки"));
	Возврат тчНаФорме;

КонецФункции

Процедура УдалитьРеквизиты()

	РеквизитыТаблица.Очистить();
	// Ненадежно
	Пока ЭлементыФормы.панельТабличныеЧасти.Страницы.Количество() > мБазовоеКоличествоСтраницПанелиТЧ Цикл
		ЭлементыФормы.панельТабличныеЧасти.Страницы.Удалить(мБазовоеКоличествоСтраницПанелиТЧ);
	КонецЦикла;

КонецПроцедуры // УдалитьРеквизиты()

Функция ПолучитьОбъект(СохранятьИдентификаторСсылки = Ложь, ТолькоМакет = Ложь)
	
	Если Ложь
		Или Не ЗначениеЗаполнено(ТипОсновнойТаблицы) 
		Или (Истина
			И мЭтоСсылочныйОбъект
			И ТипЗнч(ВыбОбъект) = Тип("Строка"))
	Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Если мЭтоСсылочныйОбъект Тогда
		Если Не ТолькоМакет И ЗначениеЗаполнено(ВыбОбъект) Тогда 
			Объект = ВыбОбъект.ПолучитьОбъект();
			Если Объект <> Неопределено Тогда
				Объект.Прочитать(); // Получаем гарантировано свежие данные мимо объектного кэша, но объектный кэш не обновится https://partners.v8.1c.ru/forum/t/1383852/
			КонецЕсли; 
		КонецЕсли; 
		Если Объект = Неопределено Тогда
			Если ЗначениеЗаполнено(ВыбОбъект) Тогда 
				ИдентификаторСсылки = ВыбОбъект.УникальныйИдентификатор();
			ИначеЕсли Не СохранятьИдентификаторСсылки Тогда
				ИдентификаторСсылки = Неопределено;
			КонецЕсли;
			Если ВыбОбъект <> "" Тогда
				Попытка
					Объект = ирОбщий.СоздатьСсылочныйОбъектПоМетаданнымЛкс(мМетаданныеОбъекта, мЭтоГруппа, ИдентификаторСсылки);
				Исключение
					// Может не быть прав на создание объекта
					Сообщить("Ошибка создания объекта: " + ОписаниеОшибки());
					Возврат Неопределено;
				КонецПопытки; 
			КонецЕсли; 
		КонецЕсли;
	Иначе
		Объект = ПолучитьКлючОбъекта();
		Если Не ТолькоМакет Тогда
			Объект.Прочитать();
		КонецЕсли; 
	КонецЕсли; 
	Возврат Объект;
	
КонецФункции

Процедура мПеречитатьДанные(ТолькоМакет = Ложь)

	ЭтаФорма.ВыбОбъект = ЭтаФорма.ВыбОбъект;
	Объект = ПолучитьОбъект(Ложь, ТолькоМакет);
	ПоместитьДанныеОбъектаВФорму(Объект);
	
КонецПроцедуры // мПеречитатьДанные()

Процедура ОчиститьСтруктурыНаборовДвижений()
	
	ЭлементыФормы.Движения.Страницы.Очистить();
	СтраницыДвижений.Очистить();;
	
КонецПроцедуры

Функция ПоместитьДанныеОбъектаВФорму(Объект, ДанныеИзБД = Истина)

	Если мЭтоСсылочныйОбъект Тогда
		ПредставлениеОбъекта = "" + ВыбОбъект;
	Иначе
		ПредставлениеОбъекта = ИмяОсновнойТаблицы;
	КонецЕсли; 
	ирОбщий.ОбновитьТекстПослеМаркераВСтрокеЛкс(ЭтаФорма.Заголовок, , ПредставлениеОбъекта, ": ");
	УдалитьРеквизиты();
	Модифицированность = Ложь;
	ДоступностьКнопок();
	ЭлементыФормы.ПанельОбъекта.Страницы.ИзмененияНаУзлах.Значение = Null;
	ПоискВОбъекте.Очистить();
	//СвязанныеДанные.Очистить();
	ЭлементыФормы.ПанельОбъекта.Страницы.СвязанныеДанные.Значение = Null;
	//СвязанныеДанные.Очистить();
	мЭтоДокумент = ирОбщий.ЛиКорневойТипДокументаЛкс(ТипОсновнойТаблицы);
	ЭлементыФормы.ПанельОбъекта.Страницы.Движения.Видимость = мЭтоДокумент;;
	ЭлементыФормы.ЛиЧитатьПисатьДвижения.Видимость = мЭтоДокумент;
	ЭлементыФормы.ЛиЗаписьДвиженийВТранзакции.Видимость = мЭтоДокумент;
	Если Истина
		И мЭтоСсылочныйОбъект
		И ТипЗнч(ВыбОбъект) = Тип("Строка") 
	Тогда 
		Возврат Неопределено;
	КонецЕсли; 
	Если Объект = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли; 
	Если мЭтоСсылочныйОбъект Тогда
		//ЗаполнитьСтрокуТзРеквизиты(ВыбОбъект, "Ссылка", "Идентификатор", Новый ОписаниеТипов("Строка"), Истина);
		ОписаниеТиповИД = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(36));
		ЗаполнитьСтрокуТзРеквизиты(?(Объект.ЭтоНовый(), Объект.ПолучитьСсылкуНового(), ВыбОбъект), "Ссылка", "Идентификатор", ОписаниеТиповИД, Не Объект.ЭтоНовый());
		СтруктураТЧ = ирОбщий.ПолучитьТабличныеЧастиОбъектаЛкс(мМетаданныеОбъекта);
		Построитель = Новый ПостроительЗапроса("ВЫБРАТЬ Т.Ссылка ИЗ " + мМетаданныеОбъекта.ПолноеИмя() + " КАК Т");
		Построитель.ЗаполнитьНастройки();
		Для Каждого ДоступноеПоле Из Построитель.ДоступныеПоля.Ссылка.Поля Цикл
			ИмяПоля = ДоступноеПоле.Имя;
			Если СтруктураТЧ.Свойство(ИмяПоля) Тогда
				Продолжить;
			КонецЕсли;
			МетаРеквизит = мМетаданныеОбъекта.Реквизиты.Найти(ИмяПоля);
			Если МетаРеквизит <> Неопределено Тогда
				Попытка
					ИспользованиеРеквизита = МетаРеквизит.Использование;
				Исключение
					ИспользованиеРеквизита = Неопределено
				КонецПопытки;
				Если ИспользованиеРеквизита <> Неопределено Тогда
					Если Ложь
						Или (Истина
							И ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы 
							И Объект.ЭтоГруппа) 
						Или (Истина
							И ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента 
							И Не Объект.ЭтоГруппа)
						Или (ИспользованиеРеквизита = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента)
					Тогда
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
			ЗаполнитьСтрокуТзРеквизиты(Объект, ИмяПоля, ДоступноеПоле.Представление, ДоступноеПоле.ТипЗначения, Ложь
				Или Нрег(ИмяПоля) = Нрег("ВерсияДанных")
				Или Нрег(ИмяПоля) = Нрег("ЭтоГруппа")
				Или Нрег(ИмяПоля) = Нрег("Предопределенный"), ДанныеИзБД);
		КонецЦикла;
		Для Каждого ЭлементТЧ Из СтруктураТЧ Цикл
			мДобавитьСтраницуТЧ(Объект, ЭлементТЧ.Ключ, ЭлементТЧ.Значение);
		КонецЦикла;
		Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбОбъект)) Тогда
			ИмяСтраницы = "КартаМаршрута";
			НоваяСтраница = ЭлементыФормы.панельТабличныеЧасти.Страницы.Добавить(ИмяСтраницы, "Карта маршрута", , БиблиотекаКартинок.БизнесПроцесс);
			ЭлементыФормы.панельТабличныеЧасти.ТекущаяСтраница = НоваяСтраница;
			тчНаФорме = ЭлементыФормы.Добавить(Тип("ПолеГрафическойСхемы"), ИмяСтраницы, Истина, ЭлементыФормы.панельТабличныеЧасти);
			тчНаФорме.УстановитьСхему(Объект.ПолучитьКартуМаршрута());
			//тчНаФорме.АвтоКонтекстноеМеню=Истина;
			тчНаФорме.Высота = ЭлементыФормы.панельТабличныеЧасти.Высота - 30;
			тчНаФорме.Ширина = ЭлементыФормы.панельТабличныеЧасти.Ширина - 8;
			тчНаФорме.Верх = 4;
			тчНаФорме.Лево = 4;
			тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.панельТабличныеЧасти, ГраницаЭлементаУправления.Низ);
			тчНаФорме.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.панельТабличныеЧасти, ГраницаЭлементаУправления.Право);
			тчНаФорме.ТолькоПросмотр = Истина;
		КонецЕсли; 
		ЗаполнитьИндексыКартинокТаблицыРеквизитов(Объект);
		РеквизитыТаблица.Сортировать("Порядок, ИмяРеквизита");
		ЗагрузитьТаблицыДвижений(ВыбОбъект);
		ЭлементыФормы.ПанельТабличныеЧасти.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица;
		Если ирОбщий.ЛиМетаданныеОбъектаСГруппамиЛкс(мМетаданныеОбъекта) Тогда
			мЭтоГруппа = Объект.ЭтоГруппа;
		КонецЕсли;
		КнопкаПометкиНаУдаление = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПометитьНаУдаление;
		Если Объект.ПометкаУдаления Тогда
			КнопкаПометкиНаУдаление.Текст = "Снять пометку удаления";
			КнопкаПометкиНаУдаление.Подсказка = "Снять пометку удаления. Флажок ""Запись без проверок"" игнорируется";
			КнопкаПометкиНаУдаление.Пояснение = "Снять пометку удаления. Флажок ""Запись без проверок"" игнорируется";
		Иначе
			КнопкаПометкиНаУдаление.Текст = "Пометить на удаление";
			КнопкаПометкиНаУдаление.Подсказка = "Пометить на удаление. Флажок ""Запись без проверок"" игнорируется";
			КнопкаПометкиНаУдаление.Пояснение = "Пометить на удаление. Флажок ""Запись без проверок"" игнорируется";
		КонецЕсли; 
	ИначеЕсли мЭтоКонстанта Тогда
		строкаТзРеквизиты = РеквизитыТаблица.Добавить();
		строкаТзРеквизиты.ИмяРеквизита = "Значение";
		строкаТзРеквизиты.ПредставлениеРеквизита = "Значение";
		строкаТзРеквизиты.ЗначениеРеквизита = Объект.Значение;
		строкаТзРеквизиты.ОригинальноеЗначениеРеквизита = Объект.Значение;
		строкаТзРеквизиты.ТипЗначения = ТипЗнч(Объект.Значение);
		строкаТзРеквизиты.ОписаниеТипов = мМетаданныеОбъекта.Тип;
		строкаТзРеквизиты.РазрешеноИзменение = Истина;
		ЗаполнитьИндексыКартинокТаблицыРеквизитов(Объект);
	Иначе // Это набор записей
		НаборЗаписей = Объект.Выгрузить();
		ЭлементыФормы.НаборЗаписей.СоздатьКолонки();
		Если Истина
			И Не ирОбщий.ЛиКорневойТипРегистраСведенийЛкс(ТипОсновнойТаблицы)
			//И ирОбщий.ПолучитьСтруктуруКлючаТаблицыБДЛкс(, Истина).Свойство("НомерСтроки"))
			И ЭлементыФормы.НаборЗаписей.Колонки.Найти("НомерСтроки") <> Неопределено 
		Тогда
			КолонкаНомерСтроки = ЭлементыФормы.НаборЗаписей.Колонки.НомерСтроки;
			КолонкаНомерСтроки.Данные = "";
		Иначе
			КолонкаНомерСтроки = ЭлементыФормы.НаборЗаписей.Колонки.Вставить(0);
			КолонкаНомерСтроки.Имя = "НомерСтроки";
		КонецЕсли; 
		КолонкаНомерСтроки.ТекстШапки = "№";
		КолонкаНомерСтроки.ТолькоПросмотр = Истина;
		КолонкаНомерСтроки.Ширина = 6;
		Для Каждого ЭлементОтбора Из Объект.Отбор Цикл
			СтрокаТаблицы = ТаблицаОтбора.Найти(ЭлементОтбора.Имя, "ИмяПоля");
			СтрокаТаблицы.ЗначениеЧтения = ЭлементОтбора.Значение; 
		КонецЦикла;
		ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ЭлементыФормы.НаборЗаписей);
		ПодключитьОбработчикиСобытийПолейВводаКолонокТабличногоПоля(ЭлементыФормы.НаборЗаписей);
	КонецЕсли; 
	ПанельОбъектаПриСменеСтраницы();
	ПриАктивизацииСтрокиСтраницы();
	ЭтаФорма.Обновить();
	Возврат Истина;

КонецФункции

Процедура ПодключитьОбработчикиСобытийПолейВводаКолонокТабличногоПоля(Знач ТабличноеПолеСДинамическимиКолонками)
	
	Перем КолонкаТП;
	
	Для Каждого КолонкаТП Из ТабличноеПолеСДинамическимиКолонками.Колонки Цикл
		Если КолонкаТП.ЭлементУправления <> Неопределено Тогда
			КолонкаТП.ЭлементУправления.УстановитьДействие("ОкончаниеВводаТекста", Новый Действие("ПолеВвода_ОкончаниеВводаТекста"));
		КонецЕсли; 
	КонецЦикла;

КонецПроцедуры

Функция ЗаполнитьИндексыКартинокТаблицыРеквизитов(Объект)

	СтруктураТипаКонтекста = мПлатформа.ПолучитьСтруктуруТипаИзЗначения(Объект);
	ВнутренняяТаблицаСлов = мПлатформа.ПолучитьТаблицуСловСтруктурыТипа(СтруктураТипаКонтекста);
	ВнутренняяТаблицаСлов = ВнутренняяТаблицаСлов.НайтиСтроки(Новый Структура("ТипСлова", "Свойство"));
	//ВнутренняяТаблицаСлов.Колонки.Добавить("ТипЗначения");
	Для Каждого ВнутренняяСтрокаСлова Из ВнутренняяТаблицаСлов Цикл
		СтрокаРеквизита = РеквизитыТаблица.Найти(ВнутренняяСтрокаСлова.Слово, "ИмяРеквизита");
		Если СтрокаРеквизита <> Неопределено Тогда
			СтрокаРеквизита.ИндексКартинки = ирОбщий.ПолучитьИндексКартинкиСловаПодсказкиЛкс(ВнутренняяСтрокаСлова);
			Если СтрокаРеквизита.ИндексКартинки = 2 Тогда
				СтрокаРеквизита.Порядок = РеквизитыТаблица.Индекс(СтрокаРеквизита);
			Иначе
				СтрокаРеквизита.Порядок = РеквизитыТаблица.Количество();
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Процедура ЗаполнитьСвязанныеДанные()

	ЭлементыФормы.ПанельОбъекта.Страницы.СвязанныеДанные.Значение = Неопределено;
	СтараяСтрока = ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока;
	Если СтараяСтрока <> Неопределено Тогда
		СтарыйКлюч = Новый Структура("ПолноеИмяТаблицы, ИмяКолонки");
		ЗаполнитьЗначенияСвойств(СтарыйКлюч, СтараяСтрока); 
	КонецЕсли; 
	
	СвязанныеДанные.Очистить();
	СтрокиТаблицыБД.Очистить();
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли; 
	
	ТаблицаВсехТаблицБД = ирКэш.ПолучитьТаблицуВсехТаблицБДЛкс();
	ИскомыйТип = ТипЗнч(ВыбОбъект);
	Для Каждого ОписаниеТаблицы Из ТаблицаВсехТаблицБД Цикл
		Если Ложь
			Или ирОбщий.ЛиКорневойТипКритерияОтбораЛкс(ОписаниеТаблицы.Тип)
			Или (Истина
				И Не УчитыватьВиртуальныеТаблицы
				И ОписаниеТаблицы.Тип = "ВиртуальнаяТаблица")
		Тогда
			Продолжить;
		КонецЕсли; 
		КомпоновщикТаблицы = ирКэш.ПолучитьКомпоновщикТаблицыБДПоПолномуИмениЛкс(ОписаниеТаблицы.ПолноеИмя);
		Для Каждого ДоступноеПоле Из КомпоновщикТаблицы.Настройки.ДоступныеПоляВыбора.Элементы Цикл
			Если Ложь
				Или ДоступноеПоле.Папка 
				Или (Истина
					И Не УчитыватьВсеКолонкиТаблицИзменений
					И ОписаниеТаблицы.Тип = "Изменения"
					И ("" + ДоступноеПоле.Поле) <> "Узел")
			Тогда
				Продолжить;
			КонецЕсли;
			Если ДоступноеПоле.ТипЗначения.СодержитТип(ИскомыйТип) Тогда
				СтрокаСвязи = СвязанныеДанные.Добавить();
				СтрокаСвязи.ТипТаблицы = ОписаниеТаблицы.Тип;
				СтрокаСвязи.ИмяТаблицы = ОписаниеТаблицы.Имя;
				СтрокаСвязи.ПолноеИмяТаблицы = ОписаниеТаблицы.ПолноеИмя;
				СтрокаСвязи.ПредставлениеТаблицы = ОписаниеТаблицы.Представление;
				СтрокаСвязи.ИмяКолонки = "" + ДоступноеПоле.Поле;
				СтрокаСвязи.ПредставлениеКолонки = ДоступноеПоле.Заголовок;
				СтрокаСвязи.КоличествоТипов = ДоступноеПоле.ТипЗначения.Типы().Количество();
				СтрокаСвязи.КоличествоСсылающихся = "?";
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	Если СтарыйКлюч <> Неопределено Тогда
		НайденныеСтроки = СвязанныеДанные.НайтиСтроки(СтарыйКлюч);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока = НайденныеСтроки[0];
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭлементыФормы.ЗаписьНаСервере.Доступность = Не ирКэш.ЛиПортативныйРежимЛкс() Или ирПортативный.ЛиСерверныйМодульДоступенЛкс();
	
	// Такой прием нужен для обхода штатного ограничения типа
	КолонкаРасширенногоЗначения = ЭлементыФормы.РеквизитыТаблица.Колонки.ЗначениеРеквизита;
	ЭлементУправления = КолонкаРасширенногоЗначения.ЭлементУправления;
	КолонкаРасширенногоЗначения.Данные = "ЗначениеРеквизита"; 
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаВыбора = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОчистки = Истина;
	КолонкаРасширенногоЗначения.ЭлементУправления.КнопкаОткрытия = Истина;
	
	Если мПараметрИскомоеЗначение <> Неопределено Тогда
		ЭтаФорма.ЛиЧитатьПисатьДвижения = Истина;
	КонецЕсли; 
	Если мПараметрКлючИлиОбъект <> Неопределено Тогда
		ИмяОсновнойТаблицы = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(мПараметрКлючИлиОбъект.Метаданные());
		ИмяОсновнойТаблицыПриИзменении();
		Если мЭтоСсылочныйОбъект Тогда
			ЭтаФорма.ВыбОбъект = мПараметрКлючИлиОбъект.Ссылка;
		ИначеЕсли мЭтоКонстанта Тогда
		Иначе
			Для Каждого ЭлементОтбора Из мПараметрКлючИлиОбъект.Отбор Цикл
				СтрокаТаблицы = ТаблицаОтбора.Найти(ЭлементОтбора.Имя, "ИмяПоля");
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементОтбора, "Использование, Значение"); 
			КонецЦикла;
			//Если Истина
			//	И Не ПараметрКлючИлиОбъект.Выбран() 
			//	И ПараметрКлючИлиОбъект.Количество() > 0
			//Тогда
			//	НадоПрочитатьДанные = Ложь;
			//КонецЕсли; 
			НаборЗаписей = мПараметрКлючИлиОбъект.Выгрузить();
		КонецЕсли; 
		Если мПараметрПрочитатьОбъект Тогда
			мПеречитатьДанные();
		Иначе
			ПоместитьДанныеОбъектаВФорму(мПараметрКлючИлиОбъект);
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли; 
	Иначе
		Если Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
			ИмяОсновнойТаблицыПриИзменении();
		КонецЕсли; 
	КонецЕсли;
	Если мПараметрИскомоеЗначение <> Неопределено Тогда
		ИскомоеЗначение = мПараметрИскомоеЗначение;
		ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.ПоискВОбъекте;
		НайтиНажатие();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	//СохранитьЗначение("ВыбОбъект",ВыбОбъект);
	//СохранитьЗначение("ЛиЧитатьПисатьДвижения",ЛиЧитатьПисатьДвижения);
КонецПроцедуры

Процедура ВыбОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ТипОсновнойТаблицы) Тогда
		Элемент.Значение = "";
	Иначе
		Элемент.Значение = Элемент.ОграничениеТипа.ПривестиЗначение();
	КонецЕсли; 
	мПеречитатьДанные(Истина);
	ЗагрузитьТаблицыДвижений(Неопределено);
	ДоступностьКнопок();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Функция ПолучитьИзмененныйОбъект()

	Объект = ПолучитьОбъект(Истина);
	Если мЭтоСсылочныйОбъект Тогда
		МетаРеквизиты = Объект.Метаданные().Реквизиты;
		// заполним реквизиты объекта
		Для каждого СтрокаРеквизита из РеквизитыТаблица Цикл
			ЗначениеРеквизита = СтрокаРеквизита.ЗначениеРеквизита;
			МетаРеквизит = МетаРеквизиты.Найти(СтрокаРеквизита.ИмяРеквизита);
			Если Истина
				И МетаРеквизит <> Неопределено
				И Не МетаРеквизит.Тип.СодержитТип(ТипЗнч(ЗначениеРеквизита))
			Тогда
				Сообщить("Значение реквизита """ + СтрокаРеквизита.ИмяРеквизита + """ не изменено (несовместимые типы)", СтатусСообщения.Информация);
				Продолжить;
			КонецЕсли;
			Попытка
				Объект[СтрокаРеквизита.ИмяРеквизита] = ЗначениеРеквизита;
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				Если Найти(ОписаниеОшибки, "Поле объекта недоступно для записи") = 0 Тогда
					Сообщить("Не удалось установить значение реквизита """ + СтрокаРеквизита.ИмяРеквизита + """: " + ОписаниеОшибки, СтатусСообщения.Внимание);
				КонецЕсли; 
			КонецПопытки;
		КонецЦикла;
		
		// заполним табличные части из таблиц на форме
		СтруктураТЧ = ирОбщий.ПолучитьТабличныеЧастиОбъектаЛкс(Объект);
		Для Каждого КлючИЗначение из СтруктураТЧ Цикл
			мПоместитьДанныеВТЧ(Объект, КлючИЗначение.Ключ);
		КонецЦикла;
	ИначеЕсли мЭтоКонстанта Тогда
		Объект.Значение = РеквизитыТаблица[0].ЗначениеРеквизита;
	Иначе
		Объект.Загрузить(НаборЗаписей);
		ирОбщий.НаборЗаписейПослеЗагрузкиИзТаблицыЗначенийЛкс(Объект);
	КонецЕсли; 
	Возврат Объект;

КонецФункции // ПолучитьИзмененныйОбъект()

// Процедура заполняет реквизиты и табличные части из таблиц на форме и записывает объект
Функция ЗаписатьОбъект(Знач РежимЗаписи, ОбратимаяЗапись = Ложь)
	
	Объект = ПолучитьИзмененныйОбъект();
	Если Истина
		И Не Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбОбъект)) 
		И ТипЗнч(РежимЗаписи) = Тип("РежимЗаписиДокумента")
	Тогда
		РежимЗаписи = Неопределено;
	КонецЕсли;
	лОчищатьПоОтборуЧтения = Не мЭтоСсылочныйОбъект И Не мЭтоКонстанта И ОчищатьПоОтборуЧтения;
	Если лОчищатьПоОтборуЧтения Тогда
		НачатьТранзакцию();
		НаборЧтения = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяОсновнойТаблицы);
		#Если _ Тогда
		    НаборЧтения = РегистрыСведений.СостоянияАвтозаданийИис.СоздатьНаборЗаписей();
		#КонецЕсли
		Для Каждого СтрокаТаблицы Из ТаблицаОтбора Цикл
			НаборЧтения.Отбор[СтрокаТаблицы.ИмяПоля].Значение = СтрокаТаблицы.ЗначениеЧтения;
			НаборЧтения.Отбор[СтрокаТаблицы.ИмяПоля].Использование = СтрокаТаблицы.Использование;
		КонецЦикла;
		ирОбщий.ЗаписатьОбъектЛкс(НаборЧтения, ЗаписьНаСервере, РежимЗаписи, , ОтключатьКонтрольЗаписи, БезАвторегистрацииИзменений);
	КонецЕсли;
	Попытка
		ирОбщий.ЗаписатьОбъектЛкс(Объект, ЗаписьНаСервере, РежимЗаписи, , Истина
				И ОтключатьКонтрольЗаписи 
				И (Ложь
					Или РежимЗаписи = Неопределено
					Или РежимЗаписи = РежимЗаписиДокумента.Запись),
				БезАвторегистрацииИзменений);
	Исключение
		Если лОчищатьПоОтборуЧтения Тогда
			ОтменитьТранзакцию();
		КонецЕсли; 
		ВызватьИсключение;
	КонецПопытки; 
	Если лОчищатьПоОтборуЧтения Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли; 
	Если Не ОбратимаяЗапись Тогда
		Сообщить("Записываем " + Объект);
	КонецЕсли; 
	Если мЭтоСсылочныйОбъект Тогда
		Результат = Объект.Ссылка;
	Иначе
		Результат = Неопределено;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИмяТаблицыРегистра(МетаРегистр) Экспорт 
	
	ПолноеИмяМД = МетаРегистр.ПолноеИмя();
	ИмяТаблицыРегистра = "Движение_" + СтрЗаменить(ПолноеИмяМД, ".", "_");
	Возврат ИмяТаблицыРегистра;

КонецФункции

// Процедура заполняет реквизиты регистров накоплений из таблиц на форме и записывает их.
Процедура ЗаписатьРегистры(СсылкаДокумента, ОбратимаяЗапись = Ложь)
	
	ОбъектыМД = ирОбщий.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(ВыбОбъект.Метаданные(), Истина, Истина);
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ОбъектыМД.Количество());
	Для Каждого МетаРегистр из ОбъектыМД Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		ИмяТаблицыБДРегистра = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(МетаРегистр);
		лНаборЗаписей = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяТаблицыБДРегистра);
		лНаборЗаписей.Отбор[0].Установить(СсылкаДокумента);
		ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
		НоваяТаблица = ЭлементыФормы[ИмяТаблицыРегистра].Значение;
		лНаборЗаписей.Загрузить(НоваяТаблица);
		ирОбщий.НаборЗаписейПослеЗагрузкиИзТаблицыЗначенийЛкс(лНаборЗаписей);
		ирОбщий.ЗаписатьОбъектЛкс(лНаборЗаписей, ЗаписьНаСервере, , , ОтключатьКонтрольЗаписи, БезАвторегистрацииИзменений);
		Если Не ОбратимаяЗапись Тогда
			Сообщить("Записываем " + Строка(лНаборЗаписей));
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	
КонецПроцедуры

// Возвращает Истина, если удалось записать и Ложь иначе.
Функция КнопкаЗаписатьНажатие(Элемент = Неопределено, РежимЗаписи = "", ОбратимаяЗапись = Неопределено)
	
	ОбратимаяЗапись = ОбратимаяЗапись = Истина;
	МакетОбъекта = ПолучитьОбъект(Истина);
	Если МакетОбъекта = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 
	Если Истина
		И Не ОбратимаяЗапись
		И мЭтоСсылочныйОбъект
		И МакетОбъекта.ЭтоНовый()
		И ЗначениеЗаполнено(ВыбОбъект) 
	Тогда
		Ответ = Вопрос("Вы собираетесь записать данные отсутствующего в БД объекта. Иногда разумнее восстановить их из другой базы. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли; 
	Если Не мЭтоСсылочныйОбъект И Не мЭтоКонстанта И НаборЗаписей.Количество() > 0 Тогда
		ЕстьНеподходящиеОтборуСтроки = Ложь;
		Для Каждого ЭлементОтбора Из МакетОбъекта.Отбор Цикл
			Если ЭлементОтбора.Использование Тогда
				ТаблицаКолонкиНабора = НаборЗаписей.Скопировать(, ЭлементОтбора.Имя);
				ТаблицаКолонкиНабора.Свернуть(ЭлементОтбора.Имя);
				Если ТаблицаКолонкиНабора.Количество() > 1 Или ТаблицаКолонкиНабора[0][0] <> ЭлементОтбора.Значение Тогда
					ЕстьНеподходящиеОтборуСтроки = Истина;
					Прервать;
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		Если ЕстьНеподходящиеОтборуСтроки Тогда
			Ответ = Вопрос("В наборе записей обнаружены не удовлетворяющие отбору записи строки. Заполнить их удовлетворяющими значениями?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли; 
			Для Каждого ЭлементОтбора Из МакетОбъекта.Отбор Цикл
				Если ЭлементОтбора.Использование Тогда
					НаборЗаписей.ЗаполнитьЗначения(ЭлементОтбора.Значение, ЭлементОтбора.Имя);
				КонецЕсли; 
			КонецЦикла;
			Объект = ПолучитьИзмененныйОбъект();
		КонецЕсли; 
	КонецЕсли; 
	Если Истина
		И РежимЗаписи = ""
		И ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения
	Тогда
		ЗаписатьРегистры(ВыбОбъект, ОбратимаяЗапись);
		Если Не ОбратимаяЗапись Тогда
			ЗагрузитьТаблицыДвижений(ВыбОбъект);
		КонецЕсли; 
	Иначе
		ОткрылиТранзакцию = Ложь;
		Если Истина
			И Не ОбратимаяЗапись
			И мЭтоДокумент
			И ЛиЧитатьПисатьДвижения
		Тогда
			Если ЛиЗаписьДвиженийВТранзакции Тогда
				НачатьТранзакцию();
				ОткрылиТранзакцию = Истина;
				Сообщить("--Открыта транзакция");
			КонецЕсли;
		КонецЕсли; 
		Попытка
			Если РежимЗаписи <> "ПометкаУдаления" Тогда
				НоваяСсылка = ЗаписатьОбъект(?(ТипЗнч(РежимЗаписи) = Тип("Строка"), РежимЗаписиДокумента.Запись, РежимЗаписи), ОбратимаяЗапись);
			КонецЕсли; 
			Если мЭтоДокумент Тогда
				Если ЛиЧитатьПисатьДвижения Тогда
					ЗаписатьРегистры(НоваяСсылка, ОбратимаяЗапись);
				КонецЕсли; 
			КонецЕсли;
			Если Не ОбратимаяЗапись Тогда
				Если НоваяСсылка <> Неопределено Тогда
					ЭтаФорма.ВыбОбъект = НоваяСсылка;
				КонецЕсли; 
			КонецЕсли; 
			Если РежимЗаписи = "ПометкаУдаления" Тогда
				ЗаписатьОбъект(РежимЗаписи, ОбратимаяЗапись);
			КонецЕсли; 
		Исключение
			Если ОткрылиТранзакцию Тогда
				ОтменитьТранзакцию();
			КонецЕсли; 
			ВызватьИсключение;
		КонецПопытки;
		Если Не ОбратимаяЗапись Тогда
			Если ОткрылиТранзакцию Тогда
				ЗафиксироватьТранзакцию();
				Сообщить("--Зафиксирована транзакция");
			КонецЕсли; 
			мПеречитатьДанные();
			Модифицированность = Ложь;
		КонецЕсли; 
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Процедура КнопкаПровестиНажатие(Элемент)
	
	Ответ = Вопрос("Вы действительно хотите провести документ "+Строка(ВыбОбъект)+" ?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Провести документ?");
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КнопкаЗаписатьНажатие(, РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

Процедура ОбъектУдалить(Кнопка)
	
	Если Не ЗначениеЗаполнено(ВыбОбъект) Тогда
		Возврат;
	КонецЕсли;
	Ответ = Вопрос("Вы осознаёте ответственность за нарушение ссылочной целостности?
		|И действительно хотите НАВСЕГДА удалить "+Строка(ВыбОбъект)+" ?",
		РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Удалить навсегда?");
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 

	Объект = ВыбОбъект.ПолучитьОбъект();
	ирОбщий.УдалитьОбъектЛкс(Объект, ЗаписьНаСервере, ОтключатьКонтрольЗаписи, БезАвторегистрацииИзменений);
	мПеречитатьДанные();
	ЭтаФорма.ВыбОбъект = ЭтаФорма.ВыбОбъект; // Чтобы обновилось представление
	
КонецПроцедуры

Процедура ОбъектСделатьНепроведённым(Кнопка)
	
	Ответ = Вопрос("Вы действительно хотите отменить проведение документа "+Строка(ВыбОбъект)+" ?", РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет, "Отменить провединие документа?");
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	КнопкаЗаписатьНажатие(, РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

Процедура ПанельОбъектаПриСменеСтраницы(Элемент = Неопределено, ТекущаяСтраница = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПанельОбъекта;
	КонецЕсли; 
	Если ТекущаяСтраница = Неопределено Тогда
		ТекущаяСтраница = Элемент.Страницы.Индекс(Элемент.ТекущаяСтраница);
	КонецЕсли; 
	ДоступностьКнопок();
	Страницы = ЭлементыФормы.ПанельОбъекта.Страницы;
	Если Страницы[ТекущаяСтраница] = Страницы.СвязанныеДанные Тогда
		Если Страницы[ТекущаяСтраница].Значение = Null Тогда
			ЗаполнитьСвязанныеДанные();
		КонецЕсли; 
	ИначеЕсли Страницы[ТекущаяСтраница] = Страницы.ИзмененияНаУзлах Тогда
		Если Страницы[ТекущаяСтраница].Значение = Null Тогда
			ОбновитьПометкиДереваУзлов();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура флПоказыватьДвиженияПриИзменении(Элемент = Неопределено) Экспорт
	
	ПодготовитьСтраницыДвижений(ВыбОбъект);
	ЗагрузитьТаблицыДвижений(ВыбОбъект);
	ДоступностьКнопок();
	ЭтаФорма.Обновить();
	
КонецПроцедуры

Функция лкУстановитьЗначениеВЯчейку(Область, Значение, Тип)
	
	Если ТипЗнч(Значение)=Тип("Строка") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Строка", Тип.КвалификаторыСтроки);
		Область.Значение = Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Число") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Число", Тип.КвалификаторыЧисла);
		Область.Значение=Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Булево") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Булево");
		Область.Значение=Значение;
	ИначеЕсли ТипЗнч(Значение)=Тип("Дата") Тогда
		Область.СодержитЗначение=Истина;
		Область.ТипЗначения=Новый ОписаниеТипов("Дата", Тип.КвалификаторыДаты);
		Область.Значение=Значение;
	Иначе
		Область.Текст=Строка(Значение);
		Область.Примечание.Текст=ЗначениеВСтрокуВнутр(Значение);
	КонецЕсли;
	
КонецФункции

Функция лкПолучитьЗначениеИзЯчейки(Область)
	
	Если Область.СодержитЗначение=Истина Тогда
		Возврат Область.Значение;
	КонецЕсли;
	Если Область.Примечание.Текст<>"" Тогда
		Попытка
			Возврат ЗначениеИзСтрокиВнутр(Область.Примечание.Текст);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	КонецЕсли;
	Возврат Область.Текст;
	
КонецФункции

Функция ПолучитьТекущееТабличноеПоле()
	
	СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.ТекущаяСтраница;
	Если СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.ТабличныйДокумент Тогда
		Возврат Неопределено;
	ИначеЕсли СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.СвойстваОбъекта Тогда
		СтраницаТЧ = ЭлементыФОрмы.панельТабличныеЧасти.ТекущаяСтраница;
		Если СтраницаТЧ = ЭлементыФОрмы.панельТабличныеЧасти.Страницы.РеквизитыТаблица Тогда
			Возврат ЭлементыФормы.РеквизитыТаблица;
		Иначе
			Возврат ЭлементыФормы[СтраницаТЧ.Имя];
		КонецЕсли;
	ИначеЕсли СтраницаОбъекта = ЭлементыФОрмы.ПанельОбъекта.Страницы.Движения Тогда
		ИмяПанели = ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница.Имя;
		ИмяТаблицыРегистра = ЭлементыФормы[ИмяПанели].ТекущаяСтраница.Имя;
		Если ЭлементыФормы.Найти(ИмяТаблицыРегистра) = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		Возврат ЭлементыФормы[ИмяТаблицыРегистра];
	Иначе
		ТабличноеПоле = ЭлементыФормы.Найти(СтраницаОбъекта.Имя);
		Возврат ТабличноеПоле;
	КонецЕсли;
	
КонецФункции

Процедура ОсновныеДействияФормыВТаблицу(Кнопка)
	
	Т=ЭлементыФормы.ТабличныйДокумент;
	Т.Очистить();

	ТЗ=ПолучитьТекущееТабличноеПоле().Значение;
	Если ТЗ=Неопределено Тогда
		Предупреждение("Не указана таблица");
		Возврат;
	КонецЕсли;
	Кол=1;
	Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
		Т.Область(1, Кол).Текст=КолТаблицы.Имя;
		Т.Область(1, Кол).Шрифт=Новый Шрифт(Т.Область(1, Кол).Шрифт,,,истина);
		Кол=Кол+1;
	КонецЦикла;
	Стр=2;
	Для Каждого СтрТаблицы ИЗ ТЗ Цикл
		Кол=1;
		Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
			Зн=СтрТаблицы[КолТаблицы.Имя];
			лкУстановитьЗначениеВЯчейку(Т.Область(Стр, Кол), Зн, КолТаблицы.ТипЗначения);
			Кол=Кол+1;
		КонецЦикла;
		Стр=Стр+1;
	КонецЦикла;
	ЭлементыФОрмы.ПанельОбъекта.ТекущаяСтраница=ЭлементыФОрмы.ПанельОбъекта.Страницы.ТабличныйДокумент;
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзТаблицы(Кнопка)
	
	Т=ЭлементыФормы.ТабличныйДокумент;
	ТЗ=ПолучитьТекущееТабличноеПоле().Значение;
	Если ТЗ=Неопределено Тогда
		Предупреждение("Не указана таблица");
		Возврат;
	КонецЕсли;
	Если ТЗ<>РеквизитыТаблица Тогда
		ТЗ.Очистить();
	КонецЕсли;
	//Идем по колонкам таблицы значений
	Для Каждого КолТаблицы ИЗ ТЗ.Колонки Цикл
		Если ТЗ=РеквизитыТаблица Тогда
			ИмяРеквизитаКолонка=неопределено;
			Для Кол=1 По Т.ШиринаТаблицы Цикл
				ИмяКолонкиМакета=СокрЛП(Т.Область(1, Кол).Текст);
				Если ИмяКолонкиМакета="ИмяРеквизита" Тогда
					ИмяРеквизитаКолонка=Кол;
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если ИмяРеквизитаКолонка=Неопределено Тогда
				Предупреждение("Нет колонки с именем реквизита");
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		//Ищем похожие колонки в макете
		Для Кол=1 По Т.ШиринаТаблицы Цикл
			ИмяКолонкиМакета=СокрЛП(Т.Область(1, Кол).Текст);
			Если ИмяКолонкиМакета<>КолТаблицы.Имя Тогда
				Продолжить;
			КонецЕсли;
			//Нашли нужную нам колонку, идем по строкам
			Для Стр=2 По Т.ВысотаТаблицы Цикл
				Зн=лкПолучитьЗначениеИзЯчейки(Т.Область(Стр, Кол));
				Если ТЗ=РеквизитыТаблица Тогда
					Если КолТаблицы.Имя="ЗначениеРеквизита" Тогда
						ИмяРеквизита = лкПолучитьЗначениеИзЯчейки(Т.Область(Стр, ИмяРеквизитаКолонка));
						СтрокаТаблицы = РеквизитыТаблица.Найти(ИмяРеквизита, "ИмяРеквизита");
						Если СтрокаТаблицы.РазрешеноИзменение Тогда
							СтрокаТаблицы.ЗначениеРеквизита = Зн;
							СтрокаТаблицы.ТипЗначения = ТипЗнч(Зн);
							СтрокаТаблицы.ПризнакМодификации = Истина;
						КонецЕсли; 
					КонецЕсли;
				Иначе
					Пока ТЗ.Количество()<Стр-1 Цикл
						ТЗ.Добавить();
					КонецЦикла;
					ТЗ[Стр-2][Кол-1]=Зн;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	ЭтаФорма.Модифицированность = Истина;
	Предупреждение("Данные загружены");
	
КонецПроцедуры

Функция мПроверитьМодифицированность()

	Отказ = Ложь;
	Если Модифицированность Тогда
		Ответ = Вопрос("Данные были изменены. Продолжить не сохраняя изменения?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Не Отказ;

КонецФункции // мПроверитьМодифицированность()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Отказ = Отказ Или Не мПроверитьМодифицированность();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПеречитать(Кнопка)
	
	Если мПроверитьМодифицированность() Тогда 
		мПеречитатьДанные();
	КонецЕсли;

КонецПроцедуры

Процедура ВыбОбъектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ТипЗнч(Элемент.Значение) = Тип("Строка") Тогда
		ирОбщий.ВыбратьТипСсылкиВПолеВводаЛкс(Элемент, СтандартнаяОбработка);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);

КонецПроцедуры

Процедура ВыбОбъектОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, , Истина);
	
КонецПроцедуры

Процедура ПослеВосстановленияЗначений()
	
	ИмяОсновнойТаблицыПриИзменении();
	ИмяПредставлениеПриИзменении();
	СвязанныеДанныеТолькоНепустыеПриИзменении();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИсследовать(Кнопка)
	
	Объект = ПолучитьИзмененныйОбъект();
	Если ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта Тогда 
		Если Объект <> Неопределено Тогда 
			ирОбщий.ИсследоватьЛкс(Объект);
		КонецЕсли; 
	ИначеЕсли ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения Тогда 
		ТекущаяСтрока = ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока;
		лНаборЗаписей = Новый (ТекущаяСтрока.ТипРегистра + "НаборЗаписей." + ТекущаяСтрока.Имя);
		лНаборЗаписей.Отбор[0].Установить(ВыбОбъект);
		НоваяТаблица = ЭлементыФормы["Движение_" + ТекущаяСтрока.ТипРегистра + "_" + ТекущаяСтрока.Имя].Значение;
		лНаборЗаписей.Загрузить(НоваяТаблица);
		ирОбщий.НаборЗаписейПослеЗагрузкиИзТаблицыЗначенийЛкс(лНаборЗаписей);
		лНаборЗаписей.ОбменДанными.Загрузка = ОтключатьКонтрольЗаписи;
		лНаборЗаписей.ОбменДанными.Получатели.Автозаполнение = Не БезАвторегистрацииИзменений;
		ирОбщий.ИсследоватьЛкс(лНаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ПризнакМодификации = Истина Тогда
		ОформлениеСтроки.ЦветТекста = WebЦвета.КожаноКоричневый;
	КонецЕсли; 
	Если ДанныеСтроки.ЛиСтрокаНеограниченнойДлины = Истина Тогда
		ОформлениеСтроки.Ячейки.ЗначениеРеквизита.ЦветФона = ЦветФонаСтрокиНеограниченноДлины;
	КонецЕсли; 
	Если Истина
		И ДанныеСтроки.РазрешеноИзменение
		И ТипЗнч(ДанныеСтроки.ЗначениеРеквизита) = Тип("Булево") 
	Тогда
		ОформлениеСтроки.Ячейки.ЗначениеРеквизита.УстановитьФлажок(ДанныеСтроки.ЗначениеРеквизита);
	КонецЕсли;
	ирОбщий.ТабличноеПоле_ОтобразитьПиктограммыТиповЛкс(ОформлениеСтроки, "ЗначениеРеквизита");
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.Идентификаторы);
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаПриИзменении(Элемент = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.РеквизитыТаблица.Колонки.ЗначениеРеквизита.ЭлементУправления;
	КонецЕсли; 
	ТекущиеДанные = ЭлементыФормы.РеквизитыТаблица.ТекущиеДанные;
	ТекущиеДанные.ОригинальноеЗначениеРеквизита = ТекущиеДанные.ЗначениеРеквизита;
	ТекущиеДанные.ПризнакМодификации = Истина;
	ТекущиеДанные.ТипЗначения = ТипЗнч(ТекущиеДанные.ОригинальноеЗначениеРеквизита);
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПолеВводаЗначения = Элемент.Колонки.ЗначениеРеквизита.ЭлементУправления;
	ПолеВводаЗначения.ТолькоПросмотр = Не Элемент.ТекущаяСтрока.РазрешеноИзменение;
	ПолеВводаЗначения.КнопкаВыбора = Элемент.ТекущаяСтрока.РазрешеноИзменение;
	ПолеВводаЗначения.КнопкаОчистки = Элемент.ТекущаяСтрока.РазрешеноИзменение;
	
КонецПроцедуры

Процедура РеквизитыТаблицаПриИзмененииФлажка(Элемент, Колонка)
	
	ирОбщий.ИнтерактивноЗаписатьВКолонкуТабличногоПоляЛкс(Элемент, Колонка, Не Элемент.ТекущаяСтрока[Колонка.Данные]);
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ЗначениеРеквизита);

КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиСсылкиНаОбъект(Кнопка)
	
	Если ТипЗнч(ВыбОбъект) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли; 
 	ПоискСсылокНаОбъект = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирПоискСсылокНаОбъект");
	#Если _ Тогда
		ПоискСсылокНаОбъект = Обработки.ирПоискСсылокНаОбъект.Создать();
	#КонецЕсли
	ПоискСсылокНаОбъект.НайтиИПоказатьСсылки(ВыбОбъект);
	
КонецПроцедуры

Процедура ПриАктивизацииСтрокиСтраницы()
	
	ТабличноеПоле = ЭлементыФормы.СтраницыДвижения;
	ЭлементыФормы.Движения.Видимость = ТабличноеПоле.ТекущаяСтрока <> Неопределено;
	Если ЭлементыФормы.Движения.Видимость Тогда
		ЭлементыФормы.Движения.ТекущаяСтраница = ЭлементыФормы.Движения.Страницы[ТабличноеПоле.ТекущаяСтрока.ИмяСтраницы];
		ТабличноеПолеНабораДвижений = ЭтаФорма.ЭлементыФормы[ТабличноеПоле.ТекущаяСтрока.ИмяСтраницы];
		Если ТабличноеПолеНабораДвижений.Колонки.Количество() = 0 Тогда
			ТабличноеПолеНабораДвижений.АвтоКонтекстноеМеню = Истина;
			ТабличноеПолеНабораДвижений.ИзменяетДанные = Истина;
			ТабличноеПолеНабораДвижений.Доступность = Истина;
			ТабличноеПолеНабораДвижений.ТолькоПросмотр = Ложь;
			ТабличноеПолеНабораДвижений.ИзменятьСоставСтрок = Истина;
			ТабличноеПолеНабораДвижений.ИзменятьПорядокСтрок = Истина;
			ТабличноеПолеНабораДвижений.Доступность = Истина;
			//ТабличноеПолеНабораДвижений.ЧередованиеЦветовСтрок = Истина;
			ТабличноеПолеНабораДвижений.СоздатьКолонки();
			Если ТабличноеПолеНабораДвижений.Значение.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
				ТабличноеПолеНабораДвижений.Колонки.НомерСтроки.Данные = "";
				ТабличноеПолеНабораДвижений.Колонки.НомерСтроки.ТолькоПросмотр = Истина;
			КонецЕсли;
			ирОбщий.НастроитьДобавленныеКолонкиТабличногоПоляЛкс(ТабличноеПолеНабораДвижений);
			ПодключитьОбработчикиСобытийПолейВводаКолонокТабличногоПоля(ТабличноеПолеНабораДвижений);
			ТабличноеПолеНабораДвижений.УстановитьДействие("ПриВыводеСтроки", Новый Действие("НаборЗаписейПриВыводеСтроки"));
		КонецЕсли; 
		ЭлементыФормы.КоманднаяПанельНабораДвижений.ИсточникДействий = ТабличноеПолеНабораДвижений;
	КонецЕсли; 
	ЭлементыФормы.КоманднаяПанельНабораДвижений.Доступность = ЭлементыФормы.Движения.Видимость;
	
КонецПроцедуры

Процедура СтраницыДвиженияПриАктивизацииСтроки(Элемент)
	
	ПриАктивизацииСтрокиСтраницы();
	
КонецПроцедуры

Процедура СтраницыДвиженияНакопленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ТипРегистра.ОтображатьКартинку = Истина;
	ОформлениеСтроки.Ячейки.ТипРегистра.ИндексКартинки = ирОбщий.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ДанныеСтроки.ТипРегистра);
	
КонецПроцедуры

Процедура КП_СтраницыДвиженийСкрыватьПустые(Кнопка)
	
	Кнопка.Пометка = Не Кнопка.Пометка;
	ЭлементОтбора = ЭлементыФормы.СтраницыДвижения.ОтборСтрок.Количество;
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = Кнопка.Пометка;
	ЭлементОтбора.Значение = 0;
	
КонецПроцедуры

Процедура ОтобратьСтраницыРегистров(Текст = Неопределено)
	
	Если Текст = Неопределено Тогда
		Текст = ФильтрИменДвижений;
	КонецЕсли; 
	ТабличноеПоле = ЭлементыФормы.СтраницыДвижения;
	ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Представление;
	Если ТабличноеПоле.ТекущаяКолонка <> Неопределено Тогда
		Если Ложь
			Или ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Имя
			Или ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.Представление
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок[ТабличноеПоле.ТекущаяКолонка.Данные];
		ИначеЕсли Ложь
			Или ТабличноеПоле.Колонки.Имя.Видимость
			Или Не ТабличноеПоле.Колонки.Представление.Видимость
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Имя;
		ИначеЕсли Ложь
			Или ТабличноеПоле.Колонки.Представление.Видимость
			Или Не ТабличноеПоле.Колонки.Имя.Видимость
		Тогда
			ЭлементОтбора = ТабличноеПоле.ОтборСтрок.Представление;
		КонецЕсли; 
	КонецЕсли; 
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = Текст;

КонецПроцедуры

Процедура ФильтрИменПриИзменении(Элемент)
	
	ОтобратьСтраницыРегистров(Элемент.Значение);
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ФильтрИменАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОтобратьСтраницыРегистров(Текст);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНовый(Кнопка)
	
	Если мПроверитьМодифицированность() Тогда 
		мЭтоГруппа = Ложь;
		ЭтаФорма.ВыбОбъект = Новый (ТипЗнч(ВыбОбъект));
		мПеречитатьДанные();
	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеДействияФормыОткрытьОсновнуюФормуОбъекта(Кнопка)
	
	//Объект = ПолучитьИзмененныйОбъект();
	//ОсновнаяФормаОбъекта = Объект.ПолучитьФорму();
	//ОсновнаяФормаОбъекта.Открыть();
	//ОсновнаяФормаОбъекта.Модифицированность = ЭтаФорма.Модифицированность;
	//Если ЭтаФорма.Модифицированность Тогда
	//	ОткрытьЗначение(ПолучитьИзмененныйОбъект());
	//Иначе
	//	ОткрытьЗначение(ПолучитьКлючОбъекта());
	//КонецЕсли; 
	Если ЭтаФорма.Модифицированность Тогда
		ПолучитьИзмененныйОбъект().ПолучитьФорму().Открыть();
	Иначе
		ПолучитьКлючОбъекта().ПолучитьФорму().Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЗначениеИзменено = ирОбщий.ПолеВводаКолонкиРасширенногоЗначения_НачалоВыбораЛкс(ЭлементыФормы.РеквизитыТаблица, СтандартнаяОбработка,, Истина);
	Если ЗначениеИзменено Тогда
		РеквизитыТаблицаЗначениеРеквизитаПриИзменении();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыМенеджерТабличногоПоля(Кнопка)
	
	 ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ТабличноеПоле);

КонецПроцедуры

Процедура ОбновитьДеревоУзлов() Экспорт 
	
	ЭлементыФормы.ПанельОбъекта.Страницы.ИзмененияНаУзлах.Значение = Null;
	ИзмененияНаУзлах.Строки.Очистить();
	Если Не ЗначениеЗаполнено(ТипОсновнойТаблицы) Тогда 
		Возврат;
	КонецЕсли; 
	СтрокаКорневогоТипа = ирКэш.Получить().ПолучитьСтрокуТипаМетаОбъектов("ПланОбмена");
	Для каждого ПланОбменаМД Из Метаданные.ПланыОбмена Цикл
		МассивУзлов         = Новый Массив; 
		МенеджерПланаОбмена = ПланыОбмена[ПланОбменаМД.Имя];
		ВыборкаУзлов        = МенеджерПланаОбмена.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка = МенеджерПланаОбмена.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			МассивУзлов.Добавить(ВыборкаУзлов.Ссылка);
		КонецЦикла;
		ЭлементСостава = ПланОбменаМД.Состав.Найти(мМетаданныеОбъекта);
		Если ЭлементСостава = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаДЗ = ИзмененияНаУзлах.Строки.Найти(ПланОбменаМД.Синоним, "УзелОбмена", Ложь);
		Если СтрокаДЗ = Неопределено Тогда
			СтрокаДЗ = ИзмененияНаУзлах.Строки.Добавить();
			СтрокаДЗ.УзелОбмена     = ПланОбменаМД.Синоним;
			СтрокаДЗ.ИмяПланаОбмена = ПланОбменаМД.Имя;
			СтрокаДЗ.ИндексКартинки = СтрокаКорневогоТипа.ИндексКартинкиЕдинственное;
			СтрокаДЗ.РежимАвтоРегистрации = ЭлементСостава.Авторегистрация = АвтоРегистрацияИзменений.Разрешить;
		КонецЕсли;
		//Если МассивУзлов.Количество() > 0 Тогда
			Для каждого Узел Из МассивУзлов Цикл
				СтрокаУзла = СтрокаДЗ.Строки.Найти(Узел, "УзелОбмена", Ложь);
				Если СтрокаУзла = Неопределено Тогда
					СтрокаУзла = СтрокаДЗ.Строки.Добавить();
					СтрокаУзла.УзелОбмена = Узел;
					СтрокаУзла.ИндексКартинки = ирОбщий.ПолучитьИндексКартинкиСсылкиЛкс(Узел);
					СтрокаУзла.РежимАвтоРегистрации = ЭлементСостава.Авторегистрация = АвтоРегистрацияИзменений.Разрешить;
				КонецЕсли;
			КонецЦикла;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПометкиДереваУзлов()
	
	КлючОбъекта = ПолучитьКлючОбъекта();
	ПостроительИзмененийТаблицы = ПолучитьПостроительИзмененийТаблицы();
	Если ПостроительИзмененийТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	#Если _ Тогда
	    ПостроительИзмененийТаблицы = Новый ПостроительЗапроса;
	#КонецЕсли
	ТаблицаИзмененийНедоступна = ПостроительИзмененийТаблицы.ДоступныеПоля.Количество() = 0;
	Если мЭтоСсылочныйОбъект Тогда
		Если ЗначениеЗаполнено(КлючОбъекта) Тогда
			ПостроительИзмененийТаблицы.Отбор.Добавить("Ссылка", "Ссылка").Установить(КлючОбъекта);
		Иначе
			ТаблицаИзмененийНедоступна = Истина;
		КонецЕсли; 
	ИначеЕсли мЭтоКонстанта Тогда
	Иначе
		Для Каждого ДоступноеПоле Из ПостроительИзмененийТаблицы.ДоступныеПоля Цикл
			Если Ложь
				Или Не ДоступноеПоле.Отбор
				Или ирОбщий.СтрокиРавныЛкс(ДоступноеПоле.Имя, "НомерСообщения")
				Или ирОбщий.СтрокиРавныЛкс(ДоступноеПоле.Имя, "Узел")
			Тогда
				Продолжить;
			КонецЕсли; 
			ЭлементОтбораКлюча = КлючОбъекта.Отбор[ДоступноеПоле.Имя];
			Если Не ЭлементОтбораКлюча.Использование Тогда
				ТаблицаИзмененийНедоступна = Истина;
				Прервать;
			КонецЕсли; 
			ПостроительИзмененийТаблицы.Отбор.Добавить(ДоступноеПоле.Имя, ДоступноеПоле.ПутьКДанным).Установить(ЭлементОтбораКлюча.Значение);
		КонецЦикла;
	КонецЕсли; 
	ЭлементыФормы.ИзмененияНаУзлах.ТолькоПросмотр = ТаблицаИзмененийНедоступна;
	Если Не ТаблицаИзмененийНедоступна Тогда
		ТаблицаУзлов = ПостроительИзмененийТаблицы.Результат.Выгрузить();
		ТаблицаУзлов.Колонки.Добавить("НайденВДереве", Новый ОписаниеТипов("Булево"));
		Для каждого ПланОбмена Из ЭтаФорма.ИзмененияНаУзлах.Строки Цикл
			Для каждого СтрокаУзла Из ПланОбмена.Строки Цикл
				СтрокаУзла.Пометка = Ложь;
				//СтрокаУзла.Выгружен = Ложь;
				СтрокаРегистрации = ТаблицаУзлов.Найти(СтрокаУзла.УзелОбмена, "Узел");
				Если СтрокаРегистрации <> Неопределено Тогда
					СтрокаУзла.Пометка = Истина;
					СтрокаУзла.НомерСообщения = СтрокаРегистрации.НомерСообщения;
					СтрокаРегистрации.НайденВДереве = Истина;
					//СтрокаУзла.Выгружен = СтрокаРегистрации.НомерСообщения <> Null;
				КонецЕсли;
				//ирОбщий.УстановитьПометкиРодителейЛкс(СтрокаУзла);
			КонецЦикла;
			ирОбщий.УстановитьПометкиРодителейЛкс(ПланОбмена);
		КонецЦикла;
		Для Каждого СтрокаТаблицыУзлов Из ТаблицаУзлов.НайтиСтроки(Новый Структура("НайденВДереве", Ложь)) Цикл
			СтрокаПланаОбмена = ЭтаФорма.ИзмененияНаУзлах.Строки.Найти(СтрокаТаблицыУзлов.Узел.Метаданные().Имя, "ИмяПланаОбмена");
			СтрокаУзла = СтрокаПланаОбмена.Строки.Добавить();
			СтрокаУзла.УзелОбмена = СтрокаТаблицыУзлов.Узел;
			СтрокаУзла.Пометка = Истина;
			СтрокаУзла.ИндексКартинки = ирОбщий.ПолучитьИндексКартинкиСсылкиЛкс(СтрокаУзла.УзелОбмена);
			СтрокаУзла.НомерСообщения = СтрокаТаблицыУзлов.НомерСообщения;
			СтрокаТаблицыУзлов.НайденВДереве = Истина;
		КонецЦикла;
		ИзмененияНаУзлах.Строки.Сортировать("УзелОбмена", Истина);
	КонецЕсли; 
	
КонецПроцедуры

Функция ПолучитьПостроительИзмененийТаблицы()
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	Попытка
		ПостроительЗапроса.Текст = "
		|ВЫБРАТЬ 
		|	* 
		//|ИЗ " + ИмяОсновнойТаблицы + ".Изменения"; // Так платформа выдает ошибку на таблицах перерасчетов
		|ИЗ " + ИмяОсновнойТаблицы + ".Изменения КАК _Изменения_";
	Исключение
		// В планы обмена таблица не входит
		Возврат Неопределено;
	КонецПопытки; 
	ПостроительЗапроса.ЗаполнитьНастройки();
	Возврат ПостроительЗапроса;
	
КонецФункции

Процедура ДеревоУзловПриИзмененииФлажка(Элемент, Колонка)
	
	СтрокаУзла = Элемент.ТекущаяСтрока;
	КлючОбъекта = ПолучитьКлючОбъекта();
	Если СтрокаУзла.Пометка = 2 Тогда
		СтрокаУзла.Пометка = 0;
	КонецЕсли; 
	Если СтрокаУзла.Уровень() = 0 Тогда
		Для каждого ДочерняяСтрока Из СтрокаУзла.Строки Цикл
			//Попытка
				ирОбщий.ИзменитьРегистрациюДляУзлаЛкс(ДочерняяСтрока.УзелОбмена, КлючОбъекта, СтрокаУзла.Пометка, ЛиЧитатьПисатьДвижения);
			//Исключение
			//	ОписаниеОшибки = ОписаниеОшибки(); // Для отладки
			//КонецПопытки;
		КонецЦикла;
	Иначе
		//Попытка
			ирОбщий.ИзменитьРегистрациюДляУзлаЛкс(СтрокаУзла.УзелОбмена, КлючОбъекта, СтрокаУзла.Пометка, ЛиЧитатьПисатьДвижения);
		//Исключение
		//	ОписаниеОшибки = ОписаниеОшибки(); // Для отладки
		//КонецПопытки;
	КонецЕсли;
	ОбновитьПометкиДереваУзлов();
	
КонецПроцедуры

Функция ПолучитьКлючОбъекта()
	
	Если мЭтоСсылочныйОбъект Тогда
		Результат = ЭтаФорма.ВыбОбъект;
	ИначеЕсли мЭтоКонстанта Тогда
		Результат = Новый (СтрЗаменить(ИмяОсновнойТаблицы, ".", "МенеджерЗначения."));
	Иначе
		Результат = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяОсновнойТаблицы);
		#Если _ Тогда
		    Результат = РегистрыСведений.СостоянияАвтозаданийИис.СоздатьНаборЗаписей();
		#КонецЕсли
		Для Каждого СтрокаТаблицы Из ТаблицаОтбора Цикл
			Результат.Отбор[СтрокаТаблицы.ИмяПоля].Значение = СтрокаТаблицы.Значение;
			Результат.Отбор[СтрокаТаблицы.ИмяПоля].Использование = СтрокаТаблицы.Использование;
		КонецЦикла;
	КонецЕсли; 
	Возврат Результат;
	
КонецФункции

Процедура ДеревоУзловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейка = ОформлениеСтроки.Ячейки.УзелОбмена;
	Если ДанныеСтроки.Уровень() = 0 Тогда
		Если ДанныеСтроки.Строки.Количество() = 0 Тогда
			Ячейка.ТолькоПросмотр = Истина;
		КонецЕсли; 
		// Антибаг 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1020915#1020915
		//Ячейка.УстановитьКартинку(ирОбщий.ПолучитьОбщуюКартинкуЛкс("ирДеревоМетаданных"));
		//Ячейка.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
	Иначе
		Ячейка.УстановитьКартинку(ирОбщий.ПолучитьОбщуюКартинкуЛкс("ирСостояниеСсылки"));
		Ячейка.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
		//Если ДанныеСтроки.НомерСообщения = 0 Тогда
		//	ОформлениеСтроки.Ячейки.НомерСообщения.УстановитьТекст("Нет");
		//КонецЕсли; 
	КонецЕсли; 
	ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ОтображатьКартинку = Истина;
	Если ДанныеСтроки.РежимАвтоРегистрации = Истина Тогда
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 0;
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Разрешить";
	Иначе
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.ИндексКартинки = 1;
		ОформлениеСтроки.Ячейки.РежимАвтоРегистрации.Текст = "Запретить";
	КонецЕсли;
	
КонецПроцедуры

Процедура ДеревоУзловВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбраннаяСтрока.УзелОбмена) <> Тип("Строка") Тогда
		ОткрытьЗначение(ВыбраннаяСтрока.УзелОбмена);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоУзловОбновить(Кнопка)
	
	ОбновитьПометкиДереваУзлов();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЖурналРегистрации(Кнопка)
	
	АнализЖурналаРегистрации = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирАнализЖурналаРегистрации");
	#Если _ Тогда
		АнализЖурналаРегистрации = Обработки.ирАнализЖурналаРегистрации.Создать();
	#КонецЕсли
	Если мЭтоКонстанта Тогда
		АнализЖурналаРегистрации.ОткрытьСПараметром("Метаданные", ИмяОсновнойТаблицы);
	Иначе
		АнализЖурналаРегистрации.ОткрытьСПараметром("Данные", ВыбОбъект);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельРегламентныеЗаданияНовоеОкно(Кнопка)
	
	ирОбщий.ОткрытьНовоеОкноОбработкиЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура НайтиЗначениеВТаблицеОбъекта(ТабличноеПоле, ИмяТаблицыОбъекта, ИскомоеЗначение)
	
	ТипИскомогоЗначения = ТипЗнч(ИскомоеЗначение);
	#Если _ Тогда
	    ТаблицаТЧ = Новый ТаблицаЗначений;
	#КонецЕсли
	ТаблицаТЧ = ТабличноеПоле.Значение;
	Для Каждого Колонка Из ТаблицаТЧ.Колонки Цикл
		Если Не Колонка.ТипЗначения.СодержитТип(ТипИскомогоЗначения) Тогда
			Продолжить;
		КонецЕсли; 
		НайденныеСтроки = ТаблицаТЧ.НайтиСтроки(Новый Структура(Колонка.Имя, ИскомоеЗначение));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			СтрокаРезультата = ПоискВОбъекте.Добавить();
			СтрокаРезультата.ТаблицаОбъекта = ИмяТаблицыОбъекта;
			СтрокаРезультата.НомерСтроки = ТаблицаТЧ.Индекс(НайденнаяСтрока) + 1;
			СтрокаРезультата.Реквизит = Колонка.Имя;
			СтрокаРезультата.ТабличноеПоле = ТабличноеПоле.Имя;
		КонецЦикла; 
	КонецЦикла; 

КонецПроцедуры

Процедура НайтиНажатие(Элемент = Неопределено)
	
	ПоискВОбъекте.Очистить();
	Если Ложь
		Или мЭтоСсылочныйОбъект 
		Или мЭтоКонстанта
	Тогда
		НайденныеСтроки = РеквизитыТаблица.НайтиСтроки(Новый Структура("ЗначениеРеквизита", ИскомоеЗначение));
		Для Каждого СтрокаРеквизита Из НайденныеСтроки Цикл
			СтрокаРезультата = ПоискВОбъекте.Добавить();
			СтрокаРезультата.Реквизит = СтрокаРеквизита.ИмяРеквизита;
		КонецЦикла; 
		Для Индекс = мБазовоеКоличествоСтраницПанелиТЧ По ЭлементыФормы.ПанельТабличныеЧасти.Страницы.Количество() - 1 Цикл
			Страница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы[Индекс];
			НайтиЗначениеВТаблицеОбъекта(ЭлементыФормы[Страница.Имя], Страница.Имя, ИскомоеЗначение);
		КонецЦикла;
		Для Индекс = 0 По СтраницыДвижений.Количество() - 1 Цикл
			СтрокаСтраницы = СтраницыДвижений[Индекс];
			НайтиЗначениеВТаблицеОбъекта(ЭлементыФормы[СтрокаСтраницы.ИмяСтраницы], СтрокаСтраницы.Имя, ИскомоеЗначение);
		КонецЦикла; 
	Иначе
		НайтиЗначениеВТаблицеОбъекта(ЭлементыФормы.НаборЗаписей, ЭлементыФормы.ПанельТабличныеЧасти.Страницы.НаборЗаписей.Имя, ИскомоеЗначение);
	КонецЕсли; 
	Если ПоискВОбъекте.Количество() = 1 Тогда
		ЭлементыФормы.ПоискВОбъекте.ТекущаяСтрока = ПоискВОбъекте[0];
		ПоискВОбъектеВыбор();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПоискВОбъектеВыбор(Элемент = Неопределено, ВыбраннаяСтрока = Неопределено, Колонка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	Если Элемент = Неопределено Тогда
		Элемент = ЭлементыФормы.ПоискВОбъекте;
	КонецЕсли; 
	Если ВыбраннаяСтрока = Неопределено Тогда
		ВыбраннаяСтрока = Элемент.ТекущаяСтрока;
	КонецЕсли; 
	Если Не ЗначениеЗаполнено(ВыбраннаяСтрока.ТаблицаОбъекта) Тогда
		ТабличноеПоле = ЭлементыФормы.РеквизитыТаблица;
		ИмяКолонки = "ЗначениеРеквизита";
		СтрокаРезультата = ТабличноеПоле.Значение.Найти(ВыбраннаяСтрока.Реквизит, "ИмяРеквизита");
	Иначе
		ТабличноеПоле = ЭлементыФормы[ВыбраннаяСтрока.ТабличноеПоле];
		ИмяКолонки = ВыбраннаяСтрока.Реквизит;
		СтрокаРезультата = ТабличноеПоле.Значение[ВыбраннаяСтрока.НомерСтроки - 1];
		СтрокаСтраницыДвижений = СтраницыДвижений.Найти(ВыбраннаяСтрока.ТабличноеПоле);
		Если СтрокаСтраницыДвижений <> Неопределено Тогда
			ЭлементыФормы.СтраницыДвижения.ТекущаяСтрока = СтрокаСтраницыДвижений;
		КонецЕсли; 
	КонецЕсли; 
	Если СтрокаРезультата <> Неопределено Тогда
		ТабличноеПоле.ТекущаяСтрока = СтрокаРезультата;
		ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки[ИмяКолонки];
		ЭтаФорма.ТекущийЭлемент = ТабличноеПоле;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязанныеДанныеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейка = ОформлениеСтроки.Ячейки.ТипТаблицы;
	Ячейка.ОтображатьКартинку = Истина;
	//ТипТаблицы = ирОбщий.ПолучитьПервыйФрагментЛкс(ДанныеСтроки.ТипТаблицы);
	Ячейка.ИндексКартинки = ирОбщий.ПолучитьИндексКартинкиТипаТаблицыБДЛкс(ДанныеСтроки.ТипТаблицы);

КонецПроцедуры

Процедура СвязанныеДанныеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.ТипТаблицы = "Константа" Тогда
		ФормаСписка = ирОбщий.ПолучитьФормуЛкс("Обработка.ирРедакторКонстант.Форма");
		ТекущаяСтрока = ирОбщий.ПолучитьПоследнийФрагментЛкс(ВыбраннаяСтрока.ПолноеИмяТаблицы);
		ФормаСписка.НачальноеЗначениеВыбора = ТекущаяСтрока;
		ФормаСписка.Открыть();
	Иначе
		ирОбщий.ОткрытьФормуСпискаСОтборомЛкс(ВыбраннаяСтрока.ПолноеИмяТаблицы, Новый Структура(ВыбраннаяСтрока.ИмяКолонки, ВыбОбъект));
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязанныеДанныеОбновитьКоличество(Кнопка)
	
	Если СвязанныеДанные.Количество() = 0 Тогда
		Возврат;
	КонецЕсли; 
	ТекстЗапроса = "";
	Для Каждого СтрокаСвязанныхДанных Из СвязанныеДанные Цикл
		// Антибаг 8.2.14 http://partners.v8.1c.ru/forum/thread.jsp?id=1017264#1017264
		Если ирКэш.Получить().ВерсияПлатформы >= 802014 Тогда
			Если Истина
				И СтрокаСвязанныхДанных.ТипТаблицы = "Изменения" 
				И Найти(СтрокаСвязанныхДанных.ПолноеИмяТаблицы, "РегистрСведений.") = 1
			Тогда
				Если Метаданные.ОбщиеРеквизиты.Найти(СтрокаСвязанныхДанных.ИмяКолонки) <> Неопределено Тогда
					Продолжить;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		Если ТекстЗапроса <> "" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли; 
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ """ + СтрокаСвязанныхДанных.ПолноеИмяТаблицы + """ КАК ПолноеИмяТаблицы, """ + СтрокаСвязанныхДанных.ИмяКолонки + """ КАК ИмяКолонки, КОЛИЧЕСТВО(*) КАК Количество
		|ИЗ " + ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(СтрокаСвязанныхДанных.ПолноеИмяТаблицы) + " КАК Т
		|ГДЕ Т." + СтрокаСвязанныхДанных.ИмяКолонки + " = &Ссылка";
	КонецЦикла;
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", ВыбОбъект);
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	СтруктураОтбора = Новый Структура("ПолноеИмяТаблицы, ИмяКолонки");
	Для Каждого СтрокаСвязанныхДанных Из СвязанныеДанные Цикл
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, СтрокаСвязанныхДанных); 
		НайденныеСтроки = ТаблицаРезультата.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаСвязанныхДанных.КоличествоСсылающихся = НайденныеСтроки[0].Количество;
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ЛиТаблицыИзмененийПриИзменении(Элемент)
	
	ЗаполнитьСвязанныеДанные();
	
КонецПроцедуры

Процедура СвязанныеДанныеТолькоНепустыеПриИзменении(Элемент = Неопределено)
	
	ЭлементОтбора = ЭлементыФормы.СвязанныеДанные.ОтборСтрок.КоличествоСсылающихся;
	ЭлементОтбора.ВидСравнения = ВидСравнения.НеРавно;
	ЭлементОтбора.Использование = ТолькоНепустые;
	ЭлементОтбора.Значение = 0;

КонецПроцедуры

Процедура ОбновитьОтборСвязанныхДанных(ТекстИмениТаблицы = Неопределено, ТекстИмениКолонки = Неопределено)
	
	ТабличноеПоле = ЭлементыФормы.СвязанныеДанные;
	
	Если ТекстИмениТаблицы = Неопределено Тогда
		ТекстИмениТаблицы = ФильтрИменТаблиц;
	КонецЕсли; 
	Если ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяТаблицы;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеТаблицы;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = ТекстИмениТаблицы;

	Если ТекстИмениКолонки = Неопределено Тогда
		ТекстИмениКолонки = ФильтрИменКолонок;
	КонецЕсли; 
	Если ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяКолонки;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеКолонки;
	КонецЕсли;
	ЭлементОтбора.ВидСравнения = ВидСравнения.Содержит;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.Значение = ТекстИмениКолонки;
	
	ЭлементОтбора = ТабличноеПоле.ОтборСтрок.КоличествоТипов;
	ЭлементОтбора.Использование = ТолькоПростойТип;
	Если ТолькоПростойТип Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
		ЭлементОтбора.Значение = 1;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ФильтрИменТаблицПриИзменении(Элемент)
	
    ОбновитьОтборСвязанныхДанных();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ФильтрИменКолонокПриИзменении(Элемент)
	
	ОбновитьОтборСвязанныхДанных();
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменКолонокАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОбновитьОтборСвязанныхДанных(, Текст);

КонецПроцедуры

Процедура ФильтрИменТаблицАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ОбновитьОтборСвязанныхДанных(Текст, );

КонецПроцедуры

Процедура ФильтрИменДвиженийНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ИскомоеЗначениеПриИзменении(Элемент)
	
	ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ИскомоеЗначениеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменТаблицНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ФильтрИменКолонокНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ВыбОбъектНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);

КонецПроцедуры

Процедура ТолькоПростойТипПриИзменении(Элемент)
	
	ОбновитьОтборСвязанныхДанных();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиВСписке(Кнопка)
	
	КлючОбъекта = ПолучитьКлючОбъекта();
	Если мЭтоСсылочныйОбъект Тогда
		Если ТипЗнч(КлючОбъекта) = Тип("Строка") Тогда 
			Возврат;
		КонецЕсли;
		ирОбщий.ОткрытьСсылкуВСпискеЛкс(КлючОбъекта);
	ИначеЕсли мЭтоКонстанта Тогда 
		ирОбщий.ОткрытьКонстантуВСпискеЛкс(ирОбщий.ПолучитьПоследнийФрагментЛкс(ИмяОсновнойТаблицы));
	Иначе
		ирОбщий.ОткрытьФормуСпискаСОтборомЛкс(ИмяОсновнойТаблицы, КлючОбъекта.Отбор);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНайтиВДинамическомСписке(Кнопка)
	
	ФормаСписка = ирОбщий.ПолучитьФормуЛкс("Обработка.ирДинамическийСписок.Форма",,, Новый УникальныйИдентификатор);
	ФормаСписка.НайтиСсылкуВСписке(ПолучитьКлючОбъекта());
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура СвязанныеДанныеПриАктивизацииСтроки(Элемент)
	
	Элемент = ЭлементыФормы.СвязанныеДанные;
	РезультатЗагрузки = ирОбщий.ЗагрузитьСвязанныеСтрокиТаблицыБДЛкс(ЭтаФорма, Элемент, ЭлементыФормы.СтрокиТаблицыБД, ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД,
		мВыборкаРезультатаСтрокиТаблицы, ВыбОбъект);
	Если РезультатЗагрузки = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ЭтаФорма.ПолноеИмяСвязаннойТаблицыБД = РезультатЗагрузки;
	СтрокаСвязанныхДанных = Элемент.ТекущаяСтрока;
	СтрокаСвязанныхДанных.КоличествоСсылающихся = СтрокиТаблицыБД.Количество();
	
КонецПроцедуры

Процедура СтрокиТаблицыБДВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ирОбщий.ЯчейкаТабличногоПоляРасширенногоЗначения_ВыборЛкс(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// КлючСтроки - Структура
Процедура ПоказатьЯчейкуДанныхОбъекта(ПолноеИмяТаблицы = "", ИмяКолонки = "", КлючСтроки = Неопределено) Экспорт
	
	ИмяТаблицыОбъекта = ирОбщий.ПолучитьПоследнийФрагментЛкс(ПолноеИмяТаблицы);
	ТипТаблицыОбъекта = ирОбщий.ПолучитьТипТаблицыБДЛкс(ПолноеИмяТаблицы);
	Попытка
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмяТаблицы);
	Исключение
		// ВидыСубконто
	КонецПопытки;
	Если ирОбщий.ЛиКорневойТипСсылкиЛкс(ТипТаблицыОбъекта) Тогда 
		ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.РеквизитыТаблица;
		ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка = ЭтаФорма.ТекущийЭлемент.Колонки.ЗначениеРеквизита;
		Если ЗначениеЗаполнено(ИмяКолонки) Тогда
			СтрокаРеквизита = ЭтаФорма.ТекущийЭлемент.Значение.Найти(ИмяКолонки, "ИмяРеквизита");
			Если СтрокаРеквизита <> Неопределено Тогда
				ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = СтрокаРеквизита;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Если ирОбщий.ЛиТипВложеннойТаблицыБДЛкс(ТипТаблицыОбъекта) Тогда 
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы[мПрефиксИмениТабличногоПоляТЧ + ирОбщий.ПолучитьПоследнийФрагментЛкс(ИмяТаблицыОбъекта)];
		ИначеЕсли Ложь
			Или ирОбщий.ЛиКорневойТипРегистраБДЛкс(ТипТаблицыОбъекта) 
			//Или ирОбщий.ЛиКорневойТипПоследовательностиЛкс(ТипТаблицыОбъекта)
		Тогда 
			//ЭтаФорма.ЛиЧитатьПисатьДвижения = Истина;
			//ЭтаФорма.флПоказыватьДвиженияПриИзменении();
			//ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы["Движение_" + СтрЗаменить(ПолноеИмяТаблицы, ".", "_")];
			ЭтаФорма.ТекущийЭлемент = ЭтаФорма.ЭлементыФормы.НаборЗаписей;
		Иначе
			ВызватьИсключение "Неподдерживаемый тип таблицы объекта";
		КонецЕсли;
		КолонкаТП = ЭтаФорма.ТекущийЭлемент.Колонки.Найти(ИмяКолонки);
		Если КолонкаТП <> Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка = КолонкаТП;
		КонецЕсли; 
		Если КлючСтроки <> Неопределено Тогда
			НайденныеСтроки = ЭтаФорма.ТекущийЭлемент.Значение.НайтиСтроки(КлючСтроки);
			Если НайденныеСтроки.Количество() > 0 Тогда
				ЭтаФорма.ТекущийЭлемент.ТекущаяСтрока = НайденныеСтроки[0];
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДРедактировать(Кнопка)
	
	ирОбщий.ОткрытьТекущуюСтрокуТабличногоПоляТаблицыБДВРедактореОбъектаБДЛкс(ЭлементыФормы.СтрокиТаблицыБД, ЭлементыФормы.СвязанныеДанные.ТекущаяСтрока.ПолноеИмяТаблицы);
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДОбновить(Кнопка)
	

	
	
КонецПроцедуры

Процедура ЛиТабличныеЧастиПриИзменении(Элемент)
	
	ЗаполнитьСвязанныеДанные();

КонецПроцедуры

Процедура ОсновныеДействияФормыДобавитьВИзбранное(Кнопка)
	
	 ирОбщий.ДобавитьСсылкуВИзбранноеЛкс(ВыбОбъект);
	
КонецПроцедуры

Процедура ОбновитьРазмерДинамическойТаблицы() Экспорт

	ирОбщий.ПослеЗагрузкиДинамическойВыборкиВТабличноеПолеЛкс(ЭтаФорма, мВыборкаРезультатаСтрокиТаблицы,
		ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД, ЭлементыФормы.КоличествоСтрокТаблицыБД);

КонецПроцедуры // ОбновитьРазмерТаблицы()

Процедура КоманднаяПанельСтрокиТаблицыБДЗагрузитьПолностью(Кнопка)
	
	ирОбщий.ЗагрузитьДинамическуюВыборкуВТабличноеПолеПолностьюЛкс(ЭтаФорма, мВыборкаРезультатаСтрокиТаблицы, 
		ЭлементыФормы.КоманднаяПанельСтрокиТаблицыБД);

КонецПроцедуры

Процедура РеквизитыТаблицаЗначениеРеквизитаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОригинальноеЗначениеРеквизита = ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ОригинальноеЗначениеРеквизита;
	Если Ложь
		Или ТипЗнч(ОригинальноеЗначениеРеквизита) = Тип("ХранилищеЗначения")
	Тогда
		СтандартнаяОбработка = Ложь;
		ирОбщий.ИсследоватьЛкс(ЭлементыФормы.РеквизитыТаблица.ТекущаяСтрока.ОригинальноеЗначениеРеквизита);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ВыбОбъектОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент.Значение = ВыбранноеЗначение;
	Если ТипЗнч(Элемент.Значение) <> ТипЗнч(ВыбранноеЗначение) Тогда
		ВыбранноеЗначение = "";
	КонецЕсли; 
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Элемент.Значение = Неопределено; // Если это не сделать, то ссылка будет преобразована к строковому типу
	КонецЕсли; 

КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзXML(Кнопка)
	
	Если Не мПроверитьМодифицированность() Тогда 
		Возврат;
	КонецЕсли;
	Текст = "";
	ирОбщий.ОткрытьФормуПроизвольногоЗначенияЛкс(Текст, ,, "Введите XML текст с данными объекта");
	ПрочитанныйОбъект = ирОбщий.ВосстановитьОбъектИзСтрокиXMLЛкс(Текст);
	Если ПрочитанныйОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ПрочитанныйОбъект.Метаданные().ПолноеИмя() <> ИмяОсновнойТаблицы Тогда
		Сообщить("Считанный объект имеет неверный тип """ + СериализаторXDTO.XMLТипЗнч(ПрочитанныйОбъект).ИмяТипа + """", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли; 
	ПоместитьДанныеОбъектаВФорму(ПрочитанныйОбъект, Ложь);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыгрузитьВXML(Кнопка)
	
	СериализованныйОбъект = ирОбщий.СохранитьОбъектВВидеСтрокиXMLЛкс(ПолучитьИзмененныйОбъект(), Истина);
	ирОбщий.ОткрытьФормуПроизвольногоЗначенияЛкс(СериализованныйОбъект);
	
КонецПроцедуры

Процедура КоманднаяПанельДеревоУзловРедакторИзмененийНаУзле(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.ИзмененияНаУзлах.ТекущаяСтрока;
	Если Истина
		И ТекущаяСтрока <> Неопределено
		И ТекущаяСтрока.Уровень() = 1
	Тогда
		Форма = ирОбщий.ПолучитьФормуЛкс("Обработка.ирРедакторИзмененийПоПлануОбмена.Форма");
		Форма.ПараметрУзелОбмена = ТекущаяСтрока.УзелОбмена;
		Форма.Открыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИмяОсновнойТаблицыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", Элемент, ЭтаФорма);

	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ИмяОсновнойТаблицы);
	лСтруктураПараметров.Вставить("ОтображатьКонстанты", Истина);
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьПоследовательности", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	лСтруктураПараметров.Вставить("ОтображатьВнешниеИсточникиДанных", Истина);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	СтандартнаяОбработка = Ложь;
	Форма.ОткрытьМодально();
	
КонецПроцедуры

Процедура ИмяОсновнойТаблицыПриИзменении(Элемент = Неопределено)
	
	ЭлементыФормы.ПанельОбъекта.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	мМетаданныеОбъекта = ирОбщий.НайтиОбъектМетаДанныхПоПолномуИмениТаблицыБДЛкс(ИмяОсновнойТаблицы);
	Если мМетаданныеОбъекта = Неопределено Тогда
		Если ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
			Сообщить("Таблица " + ИмяОсновнойТаблицы + " не найдена в конфигурации");
			ЭтаФорма.ИмяОсновнойТаблицы = Неопределено;
		КонецЕсли; 
	КонецЕсли; 
	ЭтаФорма.ТипОсновнойТаблицы = ирОбщий.ПолучитьТипТаблицыБДЛкс(ИмяОсновнойТаблицы);
	мЭтоСсылочныйОбъект = Ложь
		Или ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ТипОсновнойТаблицы) 
		Или (Истина
			И ТипОсновнойТаблицы = "Внешняя"
			И мМетаданныеОбъекта.ТипДанныхТаблицы = Метаданные.СвойстваОбъектов.ТипДанныхТаблицыВнешнегоИсточникаДанных.ОбъектныеДанные);
	мЭтоКонстанта = ирОбщий.ЛиКорневойТипКонстантыЛкс(ТипОсновнойТаблицы);
	мЭтоПланОбмена = ирОбщий.ЛиКорневойТипПланаОбменаЛкс(ТипОсновнойТаблицы);
	мЭтоДокумент = Ложь;
	мЭтоГруппа = Ложь;
	Если Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
		ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.СвойстваОбъекта;
	КонецЕсли; 
	Если Ложь
		Или Не ЗначениеЗаполнено(ИмяОсновнойТаблицы) 
		Или мЭтоСсылочныйОбъект 
	Тогда
		ЭлементыФормы.ПанельКлючОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельКлючОбъекта.Страницы.Ссылка;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица.Видимость = Истина;
		ЭлементыФормы.ПанельТабличныеЧасти.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.НаборЗаписей.Видимость = Ложь;
		Если ЗначениеЗаполнено(ИмяОсновнойТаблицы) Тогда
			Если ТипОсновнойТаблицы = "Внешняя" Тогда
				Фрагменты = ирОбщий.ПолучитьМассивИзСтрокиСРазделителемЛкс(ИмяОсновнойТаблицы);
				Фрагменты[0] = Фрагменты[0] + "ТаблицаСсылка";
				Если Фрагменты.Количество() > 3 Тогда
					Фрагменты.Удалить(2);
				КонецЕсли; 
				ИмяТипаСсылки = ирОбщий.ПолучитьСтрокуСРазделителемИзМассиваЛкс(Фрагменты, ".");
			Иначе
				ИмяТипаСсылки = СтрЗаменить(ИмяОсновнойТаблицы, ".", "Ссылка.");
			КонецЕсли; 
			ЭлементыФормы.ВыбОбъект.ОграничениеТипа = Новый ОписаниеТипов(ИмяТипаСсылки);
			ЭтаФорма.ВыбОбъект = ЭлементыФормы.ВыбОбъект.ОграничениеТипа.ПривестиЗначение(ЭтаФорма.ВыбОбъект);
		Иначе
			ЭлементыФормы.ВыбОбъект.ОграничениеТипа = Новый ОписаниеТипов;
			ЭтаФорма.ВыбОбъект = "";
		КонецЕсли; 
	ИначеЕсли мЭтоКонстанта Тогда
		ЭлементыФормы.ПанельКлючОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельКлючОбъекта.Страницы.Константа;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица.Видимость = Истина;
		ЭлементыФормы.ПанельТабличныеЧасти.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.НаборЗаписей.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельКлючОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельКлючОбъекта.Страницы.Отбор;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.НаборЗаписей.Видимость = Истина;
		ЭлементыФормы.ПанельТабличныеЧасти.ТекущаяСтраница = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.НаборЗаписей;
		ЭлементыФормы.ПанельТабличныеЧасти.Страницы.РеквизитыТаблица.Видимость = Ложь;
		ТаблицаОтбора.Очистить();
		МакетОбъекта = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяОсновнойТаблицы);
		#Если _ Тогда
		    МакетОбъекта = РегистрыСведений.СостоянияАвтозаданийИис.СоздатьНаборЗаписей();
		#КонецЕсли
		ПостроительИзмененийТаблицы = ПолучитьПостроительИзмененийТаблицы();
		#Если _ Тогда
		    ПостроительИзмененийТаблицы = Новый ПостроительЗапроса;
		#КонецЕсли
		Для Каждого ЭлементОтбора Из МакетОбъекта.Отбор Цикл
			СтрокаТаблицы = ТаблицаОтбора.Добавить();
			СтрокаТаблицы.ИмяПоля = ЭлементОтбора.Имя;
			СтрокаТаблицы.ПредставлениеПоля = ЭлементОтбора.Представление;
			СтрокаТаблицы.Использование = Истина;
			СтрокаТаблицы.ОписаниеТипов = ЭлементОтбора.ТипЗначения;
			СтрокаТаблицы.Значение = СтрокаТаблицы.ОписаниеТипов.ПривестиЗначение();
			СтрокаТаблицы.ТипЗначения = ТипЗнч(СтрокаТаблицы.Значение);
			Если ПостроительИзмененийТаблицы <> Неопределено Тогда
				СтрокаТаблицы.РегистрацияИзменений = ПостроительИзмененийТаблицы.ДоступныеПоля.Найти(ЭлементОтбора.Имя) <> Неопределено;
			КонецЕсли; 
		КонецЦикла;
		ЭлементыФормы.ТаблицаОтбора.Колонки.Использование.ТолькоПросмотр = Ложь
			Или Не ирОбщий.ЛиКорневойТипРегистраСведенийЛкс(ТипОсновнойТаблицы)
			Или мМетаданныеОбъекта.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору;
	КонецЕсли;
	ЭлементыФормы.ПанельОбъекта.Страницы.СвязанныеДанные.Видимость = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НайтиСсылкиНаОбъект.Доступность = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Новый.Доступность = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НоваяГруппа.Доступность = ирОбщий.ЛиМетаданныеОбъектаСГруппамиЛкс(мМетаданныеОбъекта);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Скопировать.Доступность = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.ДобавитьВИзбранное.Доступность = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НайтиВДинамическомСписке.Доступность = Не мЭтоКонстанта И ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОткрытьОсновнуюФормуОбъекта.Доступность = мЭтоСсылочныйОбъект;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ПоказатьРазличияБД.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.НайтиВСписке.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.Исследовать.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.ВыгрузитьВXML.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.ИзXML.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.КонсольОбработки.Доступность = ЗначениеЗаполнено(ИмяОсновнойТаблицы);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Прочее.Кнопки.ЖурналРегистрации.Доступность = мЭтоСсылочныйОбъект Или мЭтоКонстанта;
	ЭлементыФормы.ОтключатьКонтрольЗаписи.Доступность = Не мЭтоПланОбмена;
	ЭлементыФормы.БезАвторегистрацииИзменений.Доступность = Не мЭтоПланОбмена;
	ОбновитьДеревоУзлов();
	ПодготовитьСтраницыДвижений(ВыбОбъект);
	//Попытка
		мПеречитатьДанные(Истина);
	//Исключение
	//	Сообщить(ОписаниеОшибки(), СтатусСообщения.Внимание);
	//КонецПопытки;
	Если Элемент <> Неопределено Тогда
		ирОбщий.ПолеВводаСИсториейВыбора_ПриИзмененииЛкс(Элемент, Метаданные().Имя);
	КонецЕсли;  
	
КонецПроцедуры

Процедура ИмяОсновнойТаблицыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ирОбщий.ПолеВводаСИсториейВыбора_НачалоВыбораИзСпискаЛкс(Элемент, Метаданные().Имя);
	
КонецПроцедуры

Процедура ИмяОсновнойТаблицыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		лПолноеИмяОбъекта = Неопределено;
		Если ВыбранноеЗначение.Свойство("ПолноеИмяОбъекта", лПолноеИмяОбъекта) Тогда
			ЭтаФорма.ИмяОсновнойТаблицы = лПолноеИмяОбъекта;
			ИмяОсновнойТаблицыПриИзменении(Элемент);
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТаблицаОтбораПриИзмененииФлажка(Элемент, Колонка)
	
	ЭлементыФормы.ПанельОбъекта.Страницы.ИзмененияНаУзлах.Значение = Null;
	ПриИзмененииОтбораНабораЗаписей();
	
КонецПроцедуры

Процедура КоманднаяПанельНабораДвиженийРедакторОбъектаБДНабораДвижений(Кнопка)
	
	ТабличноеПоле = ЭлементыФормы.СтраницыДвижения;
	ТекущаяСтрока = ТабличноеПоле.ТекущаяСтрока;
	МетаРегистр = Метаданные.НайтиПоПолномуИмени(ТекущаяСтрока.ПолноеИмя);
	ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
	ТаблицаНабораДвижений = ЭлементыФормы[ИмяТаблицыРегистра].Значение;
	
	ИмяТаблицыБДРегистра = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(МетаРегистр);
	лНаборЗаписей = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяТаблицыБДРегистра);
	лНаборЗаписей.Отбор[0].Установить(ВыбОбъект);
	ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
	лНаборЗаписей.Загрузить(ТаблицаНабораДвижений);
	ирОбщий.НаборЗаписейПослеЗагрузкиИзТаблицыЗначенийЛкс(лНаборЗаписей);
	ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(лНаборЗаписей);
	
КонецПроцедуры

Процедура КоманднаяПанельНабораДвиженийОчиститьНаборДвижений(Кнопка)
	
	ТабличноеПоле = ЭлементыФормы.СтраницыДвижения;
	ТекущаяСтрока = ТабличноеПоле.ТекущаяСтрока;
	ПолноеИмяМД = ТекущаяСтрока.ТипРегистра + "." + ТекущаяСтрока.Имя;
	МетаРегистр = Метаданные.НайтиПоПолномуИмени(ПолноеИмяМД);
	ИмяТаблицыРегистра = ПолучитьИмяТаблицыРегистра(МетаРегистр);
	ТаблицаНабораДвижений = ЭлементыФормы[ИмяТаблицыРегистра].Значение;
	ТаблицаНабораДвижений.Очистить();
	
КонецПроцедуры

Процедура ТаблицаОтбораЗначениеПриИзменении(Элемент)
	
	ЭлементыФормы.ТаблицаОтбора.ТекущиеДанные.Использование = Истина;
	ЭлементыФормы.ТаблицаОтбора.ТекущиеДанные.ТипЗначения = ТипЗнч(ЭлементыФормы.ТаблицаОтбора.ТекущиеДанные.Значение);
	ПриИзмененииОтбораНабораЗаписей();
	
КонецПроцедуры

Процедура ПриИзмененииОтбораНабораЗаписей()
	
	ПанельОбъектаПриСменеСтраницы();
	
КонецПроцедуры 

Процедура ТаблицаОтбораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ирОбщий.ТабличноеПоле_ОтобразитьПиктограммыТиповЛкс(ОформлениеСтроки, "Значение");

КонецПроцедуры

Процедура КоманднаяПанельНабораЗаписейОчиститьНаборЗаписей(Кнопка)
	
	НаборЗаписей.Очистить();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыНоваяГруппа(Кнопка)
	
	Если мПроверитьМодифицированность() Тогда 
		мЭтоГруппа = Истина;
		ВыбОбъект = Новый (ТипЗнч(ВыбОбъект));
		мПеречитатьДанные();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура ОсновныеДействияФормыУдалитьСКонтролемСсылок(Кнопка)
	
	ФормаОбработки = ирОбщий.ПолучитьФормуЛкс("Обработка.ирУдалениеОбъектовСКонтролемСсылок.Форма");
	Объекты = Новый Массив;
	Объекты.Добавить(ВыбОбъект);
	ФормаОбработки.ДобавитьМассивОбъектовВУдаляемыеОбъекты(Объекты);
	ФормаОбработки.Открыть();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыИзменитьИдентификатор(Кнопка)
	
	Ответ = Вопрос("Изменения объекта будут сохранены и для него сразу будет создана копия, которая будет назначена правильным элементом его группы дублей.
	|Крайне желательно сразу провести замену ссылок и удалить неправильный элемент.", РежимДиалогаВопрос.ОКОтмена);
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	ФормаВводаИдентификатора = мПлатформа.ПолучитьФорму("УникальныйИдентификатор");
	НовыйИдентификатор = ФормаВводаИдентификатора.ОткрытьМодально();
	Если НовыйИдентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Менеджер = ирОбщий.ПолучитьМенеджерЛкс(ИмяОсновнойТаблицы);
	СсылкаНового = Менеджер.ПолучитьСсылку(НовыйИдентификатор); 
	НовыйОбъект = СсылкаНового.ПолучитьОбъект();
	Если НовыйОбъект <> Неопределено Тогда
		Предупреждение("Такой идентификатор уже занят!", 10);
		Возврат;
	КонецЕсли;
	Если Модифицированность Тогда
		КнопкаЗаписатьНажатие();
	КонецЕсли; 
	ФормаОбработки = ирОбщий.ПолучитьФормуЛкс("Обработка.ирПоискДублейИЗаменаСсылок.Форма");
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("Объект");
	ОригиналОбъекта = ВыбОбъект.ПолучитьОбъект();
	КопияОбъекта = ВыбОбъект.ПолучитьОбъект();
	ирОбщий.ЗаменитьИдентификаторОбъектаЛкс(КопияОбъекта, НовыйИдентификатор); 
	Если мЭтоПланОбмена Тогда 
		Если ирОбщий.ПолучитьКоличествоИзмененийПоУзлуЛкс(ВыбОбъект) Тогда
			Ответ = Вопрос("На узле имеются зарегистрированные изменения. После замены внутреннего идентификатора они будут удалены. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
			Если Ответ <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли; 
		ОригиналОбъекта.УстановитьНовыйКод("_");
		ОригиналОбъекта.Записать();
		Сообщить("Текущему узлу установлен новый код """ + КопияОбъекта.Код + """->""" + ОригиналОбъекта.Код + """ для возможности записи его копии с правильным кодом");
		мПеречитатьДанные();
	Иначе
		КопияОбъекта.ОбменДанными.Загрузка = Истина;
	КонецЕсли; 
	КопияОбъекта.Записать();
	СтрокаГруппы = Дерево.Строки.Добавить();
	СтрокаЭлемента = СтрокаГруппы.Строки.Добавить();
	СтрокаЭлемента[0] = КопияОбъекта.Ссылка;
	СтрокаЭлемента = СтрокаГруппы.Строки.Добавить();
	СтрокаЭлемента[0] = ВыбОбъект;
	ФормаОбработки.ОткрытьДляЗаменыПоДеревуСсылок(Дерево,, Ложь);
	ФормаОбработки.ОтключатьКонтрольЗаписи = Истина;
	ФормаОбработки.РазрешитьУдалениеСНарушениемСсылочнойЦелостности = Ложь;

КонецПроцедуры

Процедура ИскомоеЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка, , Истина);

КонецПроцедуры

Процедура ОсновныеДействияФормыРедакторОбъектаБДЯчейки(Кнопка)
	
	ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(ТабличноеПоле);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыКонсольОбработки(Кнопка)
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(ПолучитьКлючОбъекта());
	ирОбщий.ОткрытьМассивОбъектовВПодбореИОбработкеОбъектовЛкс(МассивСсылок);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПометитьНаУдаление(Кнопка)
	
	КнопкаЗаписатьНажатие(, "ПометкаУдаления");

КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДСжатьКолонки(Кнопка)
	
	ирОбщий.СжатьКолонкиТабличногоПоляЛкс(ЭлементыФормы.СтрокиТаблицыБД);
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДШиринаКолонок(Кнопка)
	
	ирОбщий.ВвестиИУстановитьШиринуКолонокТабличногоПоляЛкс(ЭлементыФормы.СтрокиТаблицыБД);

КонецПроцедуры

Процедура ИмяПредставлениеПриИзменении(Элемент = Неопределено)
	
	ТабличноеПоле = ЭлементыФормы.СвязанныеДанные;
	ТабличноеПоле.Колонки.ПредставлениеКолонки.Видимость = Не ИмяПредставление;
	ТабличноеПоле.Колонки.ПредставлениеТаблицы.Видимость = Не ИмяПредставление;
	ТабличноеПоле.Колонки.ИмяТаблицы.Видимость = ИмяПредставление;
	ТабличноеПоле.Колонки.ИмяКолонки.Видимость = ИмяПредставление;
	Если Не ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяТаблицы;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеТаблицы;
	КонецЕсли;
	ЭлементОтбора.Значение = "";
	Если Не ИмяПредставление Тогда
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ИмяКолонки;
	Иначе
		ЭлементОтбора = ТабличноеПоле.ОтборСтрок.ПредставлениеКолонки;
	КонецЕсли;
	ЭлементОтбора.Значение = "";
	СтараяКолонка = ТабличноеПоле.ТекущаяКолонка;
	Если СтараяКолонка <> Неопределено Тогда
		Если Найти(НРег(СтараяКолонка.Имя), "таблицы") > 0 Тогда
			Если ТабличноеПоле.Колонки.ПредставлениеТаблицы.Видимость Тогда
				ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ПредставлениеТаблицы;
			Иначе
				ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ИмяТаблицы;
			КонецЕсли; 
		ИначеЕсли Найти(НРег(СтараяКолонка.Имя), "колонки") > 0 Тогда
			Если ТабличноеПоле.Колонки.ПредставлениеКолонки.Видимость Тогда
				ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ПредставлениеКолонки;
			Иначе
				ТабличноеПоле.ТекущаяКолонка = ТабличноеПоле.Колонки.ИмяКолонки;
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 
	ОбновитьОтборСвязанныхДанных();
	
КонецПроцедуры

Процедура КоманднаяПанельСтрокиТаблицыБДКонсольОбработки(Кнопка)
	
	Ответ = Вопрос("Использовать значения текущей колонки?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.СтрокиТаблицыБД);
	Иначе
		ирОбщий.ОткрытьОбъектыИзВыделенныхСтрокВПодбореИОбработкеОбъектовЛкс(ЭлементыФормы.СтрокиТаблицыБД, ПолноеИмяСвязаннойТаблицыБД);
	КонецЕсли;

КонецПроцедуры

Процедура НаборЗаписейПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) Экспорт 
	
	Если Истина
		И Элемент.Значение.Колонки.Найти("Активность") <> Неопределено
		И ДанныеСтроки.Активность = Ложь 
	Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(100, 100, 100);
	КонецЕсли; 
	КолонкаТПНомераСтроки = Элемент.Колонки.Найти("НомерСтроки");
	Если Истина
		И КолонкаТПНомераСтроки <> Неопределено 
		И КолонкаТПНомераСтроки.Данные = ""
	Тогда 
		ОформлениеСтроки.Ячейки.НомерСтроки.Значение = Элемент.Значение.Индекс(ДанныеСтроки) + 1;
	КонецЕсли; 
	ирОбщий.ТабличноеПолеПриВыводеСтрокиЛкс(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ТекущаяТаблица.Кнопки.Идентификаторы);
	
КонецПроцедуры

Процедура КоманднаяПанельНабораДвиженийПереключитьАктивность(Кнопка)
	
	ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	Если Истина
		И ТабличноеПоле.Значение.Колонки.Найти("Активность") <> Неопределено
		И ТабличноеПоле.Значение.Количество() > 0 
	Тогда
		ТабличноеПоле.Значение.ЗаполнитьЗначения(ТабличноеПоле.Значение[0].Активность = Ложь, "Активность");
	КонецЕсли; 
	
КонецПроцедуры

Процедура КоманднаяПанельНабораЗаписейИдентификаторы(Кнопка)
	
	ирОбщий.КнопкаОтображатьПустыеИИдентификаторыНажатиеЛкс(Кнопка);
	ПолучитьТекущееТабличноеПоле().ОбновитьСтроки();
	
КонецПроцедуры

Функция ПолучитьXMLВсехОбъектовИзБД()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("");
	ЗаписьXML.ЗаписатьНачалоЭлемента("IRData");
	Объект = ПолучитьОбъект();
	ЗаписатьXML(ЗаписьXML, Объект);
	Если Истина
		И мЭтоДокумент 
		И ЛиЧитатьПисатьДвижения
		И ВыбОбъект <> Неопределено
		И ЭлементыФормы.ПанельОбъекта.ТекущаяСтраница = ЭлементыФормы.ПанельОбъекта.Страницы.Движения
	Тогда
		мдОбъекта = ВыбОбъект.Метаданные();
		ОбъектыМД = ирОбщий.ПолучитьМетаданныеНаборовЗаписейПоРегистраторуЛкс(мдОбъекта, Истина, Истина);
		Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ОбъектыМД.Количество(), "Чтение движений");
		Для Каждого МетаРегистр из ОбъектыМД Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
			ИмяТаблицыБДРегистра = ирОбщий.ПолучитьИмяТаблицыИзМетаданныхЛкс(МетаРегистр);
			НаборДвижений = ирОбщий.СоздатьНаборЗаписейПоИмениТаблицыБДЛкс(ИмяТаблицыБДРегистра);
			НаборДвижений.Отбор[0].Установить(Объект.Ссылка);
			НаборДвижений.Прочитать();
			ЗаписатьXML(ЗаписьXML, НаборДвижений);
		КонецЦикла;
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	КонецЕсли; 
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Результат = ЗаписьXML.Закрыть();
	Возврат Результат;
	
КонецФункции

Процедура ОсновныеДействияФормыПоказатьРазличияБД(Кнопка)
	
	ТекстДо = ПолучитьXMLВсехОбъектовИзБД();
	НачатьТранзакцию();
	Попытка
		КнопкаЗаписатьНажатие(, Неопределено, Истина);
		ТекстПосле = ПолучитьXMLВсехОбъектовИзБД();
	Исключение
		Сообщить("Ошибка обратимой записи: " + ОписаниеОшибки());
	КонецПопытки; 
	ОтменитьТранзакцию();
	Если ТекстПосле <> Неопределено Тогда
		ирОбщий.СравнитьЗначенияИнтерактивноЧерезXMLСтрокуЛкс(ТекстДо, ТекстПосле, , "Старое", "Новое", , Ложь);
	КонецЕсли; 
	
КонецПроцедуры

Процедура КлсУниверсальнаяКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура ОсновныеДействияФормыКопироватьСсылку(Кнопка)
	
	ирОбщий.БуферОбмена_УстановитьЗначениеЛкс(ВыбОбъект);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыРазличныеЗначенияКолонки(Кнопка)
	
	ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	ирОбщий.ОткрытьРазличныеЗначенияКолонкиЛкс(ТабличноеПоле);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыСкопировать(Кнопка)
	
	Если мЭтоСсылочныйОбъект Тогда
		ирОбщий.ОткрытьОбъектВРедактореОбъектаБДЛкс(ПолучитьИзмененныйОбъект().Скопировать());
	КонецЕсли; 
	
КонецПроцедуры

Процедура СвязанныеДанныеОтборБезЗначенияПриИзменении(Кнопка)
	
	ирОбщий.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.СвязанныеДанные);
	
КонецПроцедуры

Процедура ТаблицаОтбораВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка = ЭлементыФормы.ТаблицаОтбора.Колонки.ЗначениеЧтения Тогда
		ирОбщий.ОткрытьСсылкуЯчейкиВРедактореОбъектаБДЛкс(Элемент);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеДействияФормыВыбратьИЗаполнитьОбъектБД(Кнопка)
	
	ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	Если Ложь
		Или Не ТабличноеПоле.ИзменятьСоставСтрок 
		Или ТабличноеПоле.ТолькоПросмотр
	Тогда
		Возврат;
	КонецЕсли; 
	НачальноеПолноеИмяМД = ИмяОсновнойТаблицы;
	Если Найти(ТабличноеПоле.Имя, мПрефиксИмениТабличногоПоляТЧ) = 1 Тогда
		НачальноеПолноеИмяМД = НачальноеПолноеИмяМД + "." + Сред(ТабличноеПоле.Имя, СтрДлина(мПрефиксИмениТабличногоПоляТЧ) + 1);
	КонецЕсли; 
	ирОбщий.ВыбратьИЗаполнитьТабличнуюЧастьОбъектаБДЛкс(ТабличноеПоле.Значение, НачальноеПолноеИмяМД);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыЗаполнитьЗапросом(Кнопка)
	
	ТабличноеПоле = ПолучитьТекущееТабличноеПоле();
	Если Ложь
		Или Не ТабличноеПоле.ИзменятьСоставСтрок 
		Или ТабличноеПоле.ТолькоПросмотр
	Тогда
		Возврат;
	КонецЕсли; 
	НачальноеПолноеИмяМД = ИмяОсновнойТаблицы;
	Если Найти(ТабличноеПоле.Имя, мПрефиксИмениТабличногоПоляТЧ) = 1 Тогда
		НачальноеПолноеИмяМД = НачальноеПолноеИмяМД + "." + Сред(ТабличноеПоле.Имя, СтрДлина(мПрефиксИмениТабличногоПоляТЧ) + 1);
	КонецЕсли; 
	КоллекцияДляЗаполнения = ТабличноеПоле.Значение.СкопироватьКолонки();
	КоллекцияДляЗаполнения.Колонки.Очистить();
	КонсольЗапросов = ирОбщий.ПолучитьОбъектПоПолномуИмениМетаданныхЛкс("Обработка.ирКонсольЗапросов");
	#Если _ Тогда
		КонсольЗапросов = Обработки.ирКонсольЗапросов.Создать();
	#КонецЕсли
	Запрос = Новый Запрос("ВЫБРАТЬ Т.* ИЗ " + НачальноеПолноеИмяМД + " КАК Т");
	РезультатЗапроса = КонсольЗапросов.ОткрытьДляЗаполненияКоллекции(КоллекцияДляЗаполнения, Запрос);
	Если РезультатЗапроса = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	Если ТабличноеПоле.Значение.Количество() > 0 Тогда
		Ответ = Вопрос("Очистить строки таблицы перед загрузкой результата запроса?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ТабличноеПоле.Значение.Очистить();
		КонецЕсли;
	КонецЕсли; 
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(РезультатЗапроса, ТабличноеПоле.Значение);
	
КонецПроцедуры

Процедура ТаблицаОтбораЗначениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПолеВвода_ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ирОбщий.ПолеВвода_ОкончаниеВводаТекстаЛкс(Элемент, Текст, Значение, СтандартнаяОбработка);

КонецПроцедуры

Процедура КП_ОтборСнятьФлажки(Кнопка)
	
	Если Не ЭлементыФормы.ТаблицаОтбора.Колонки.Использование.ТолькоПросмотр Тогда
		ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.ТаблицаОтбора, "Использование", Ложь);
	КонецЕсли; 

КонецПроцедуры

Процедура КП_ОтборУстановитьФлажки(Кнопка)
	
	Если Не ЭлементыФормы.ТаблицаОтбора.Колонки.Использование.ТолькоПросмотр Тогда
		ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.ТаблицаОтбора, "Использование", Истина);
	КонецЕсли; 
	
КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирРедакторОбъектаБД.Форма.Форма");
мСтрокаТипаТабличнойЧасти = ирКэш.Получить().ПолучитьСтрокуТипаМетаОбъектов("ТабличнаяЧасть", , 2);

ЦветФонаСтрокиНеограниченноДлины = Новый Цвет(240, 255, 255);
// Антибаг платформы 8.2.15 http://partners.v8.1c.ru/forum/thread.jsp?id=1009788#1009788
РеквизитыТаблица.Колонки.Удалить("ЗначениеРеквизита");
РеквизитыТаблица.Колонки.Добавить("ЗначениеРеквизита", ирОбщий.ПолучитьОписаниеТиповВсеРедактируемыеТипыЛкс()); // Программно нужно добавлять, чтобы все типы можно было редактировать
РеквизитыТаблица.Колонки.Добавить("ОригинальноеЗначениеРеквизита");

ИзмененияНаУзлах.Колонки.Добавить("ИндексКартинки", Новый ОписаниеТипов("Число"));
мПрефиксИмениТабличногоПоляТЧ = "ТабличнаяЧасть_";
ПоляВвода = Новый Массив();
ЭлементыФормы.Движения.Страницы.Очистить();
мПлатформа = ирКэш.Получить();
мБазовоеКоличествоСтраницПанелиТЧ = ЭлементыФормы.ПанельТабличныеЧасти.Страницы.Количество();
Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(КлючУникальности) Тогда
	ПараметрСсылка = КлючУникальности;
КонецЕсли;
ЭтаФорма.ВыбОбъект = "";
ЭтаФорма.ПолноеИмяСвязаннойТаблицыБД = "<Полное имя таблицы>";