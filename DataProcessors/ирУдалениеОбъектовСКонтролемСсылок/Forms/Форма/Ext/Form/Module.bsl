////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ
Перем ТаблицаСсылок;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ

// Устанавливает доступность элементов управления в зависимости от режима
//
Процедура вДоступностьКнопок() 
	//БылКонтроль = ?(ТаблицаСсылок = Неопределено, Ложь, Истина);
	//БылКонтроль = Не НеобходимоВыполнитьКонтроль;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Контроль.Доступность = УдаляемыеОбъекты.Количество() > 0;
	//ЭлементыФормы.УдаляемыеОбъекты.Колонки.Удалять.ТолькоПросмотр = БылКонтроль;
	//ЭлементыФормы.КоманднаяПанельУдаляемыхОбъектов.Кнопки.УстановитьФлажки.Доступность = не БылКонтроль;
	//ЭлементыФормы.КоманднаяПанельУдаляемыхОбъектов.Кнопки.СнятьФлажки.Доступность = не БылКонтроль;
	//ЭлементыФормы.КоманднаяПанельУдаляемыхОбъектов.Кнопки.ПометитьУказанноеКоличество.Доступность = не БылКонтроль;
	//ЭлементыФормы.ПоказыватьОбъектыКоторыеМожноУдалить.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьОбъектыКоторыеНельзяУдалить.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьСсылкиУдаляемых.Доступность = БылКонтроль;
	//ЭлементыФормы.ПоказыватьСсылкиНеудаляемых.Доступность = БылКонтроль;
	//Если БылКонтроль Тогда
		ВозможноУдалить = Ложь;
		Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
			Если СтрокаУдаляемогоОбъекта.Удалять И СтрокаУдаляемогоОбъекта.Удаляется Тогда
				ВозможноУдалить = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = ВозможноУдалить;
	//Иначе
	//	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность = Ложь;
	//КонецЕсли;
	
КонецПроцедуры

// Выполняет поиск помеченных на удаление объектов
// и заполняет ими таблицу УдаляемыеОбъекты
//
Функция вОбновитьПомеченныеНаУдаление()
	Состояние("Выполняется поиск объектов, помеченных на удаление...");
	ПоказыватьОбъектыКоторыеМожноУдалить = Истина;
	ПоказыватьОбъектыКоторыеНельзяУдалить = Истина;
	ПоказыватьСсылкиУдаляемых = Истина;
	ПоказыватьСсылкиНеудаляемых = Истина;
	СсылкиНаУдаляемыеОбъекты.Очистить();
	УдаляемыеОбъекты.Очистить();
	ПослеИзмененияСоставаКандидатов();
	СоответствиеТипаКМетаданному = Новый Соответствие;
	Попытка
		МассивКУдалению = НайтиПомеченныеНаУдаление();
	Исключение
		Предупреждение("У пользователя не достаточно прав на выполнение операции.");
		Возврат Ложь;
	КонецПопытки;
	ДобавитьМассивОбъектовВУдаляемыеОбъекты(МассивКУдалению);
	ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок.Сбросить();
	вДоступностьКнопок();
	ПослеИзмененияСоставаКандидатов();
	Возврат Истина;
КонецФункции

Процедура ОбновитьСтрокуУдаляемогоОбъекта(СтрокаУдаляемогоОбъекта = Неопределено, СоответствиеТипаКМетаданному = Неопределено, Знач ПометкаУдаления = Неопределено,
	Знач Представление = Неопределено)
	
	#Если _ Тогда
		СтрокаУдаляемогоОбъекта = УдаляемыеОбъекты.Добавить();
	#КонецЕсли
	Если СтрокаУдаляемогоОбъекта = Неопределено Тогда
		СтрокаУдаляемогоОбъекта = ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока;
	КонецЕсли; 
	Если Представление = Неопределено Тогда
		Представление = "" + СтрокаУдаляемогоОбъекта.Ссылка;
	КонецЕсли; 
	СтрокаУдаляемогоОбъекта.Представление = Представление;
	ТипУдаляемогоОбъекта = ТипЗНЧ(СтрокаУдаляемогоОбъекта.Ссылка);
	Если СоответствиеТипаКМетаданному <> Неопределено Тогда
		ИмяМетаданного = СоответствиеТипаКМетаданному[ТипУдаляемогоОбъекта];
	КонецЕсли; 
	Если ИмяМетаданного = Неопределено Тогда
		ИмяМетаданного = СтрокаУдаляемогоОбъекта.Ссылка.Метаданные().ПолноеИмя();
		Если СоответствиеТипаКМетаданному <> Неопределено Тогда
			СоответствиеТипаКМетаданному.Вставить(ТипУдаляемогоОбъекта, ИмяМетаданного);
		КонецЕсли; 
	КонецЕсли; 
	СтрокаУдаляемогоОбъекта.Метаданные = ИмяМетаданного;
	СтрокаУдаляемогоОбъекта.Удалять = Истина;
	//СтрокаУдаляемогоОбъекта.Удаляется = Истина;
	Если ПометкаУдаления = Неопределено Тогда
		ПометкаУдаления = СтрокаУдаляемогоОбъекта.Ссылка.ПометкаУдаления;
	КонецЕсли; 
	Если ПометкаУдаления Тогда
		СтрокаУдаляемогоОбъекта.ИндексКартинки = 1;
	КонецЕсли;

КонецПроцедуры

// Выполняет поиск ссылок на помеченные на удаление объекты,
// заполняет ими таблицу значений "ТаблицаСсылок",
// производит контроль на возможность удаления
//
Процедура вКонтроль(СтандартныйПоиск = Ложь)
	ЕстьПомеченныеНеВОтборе = Ложь;
	Состояние("Выполняется поиск ссылок на объекты, помеченные на удаление...");
	МассивКУдалению = Новый Массив;
	Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
		Если СтрокаУдаляемогоОбъекта.Удалять  Тогда
			МассивКУдалению.Добавить(СтрокаУдаляемогоОбъекта.Ссылка);
			СтрокаУдаляемогоОбъекта.Удаляется = Истина;
		Иначе
			СтрокаУдаляемогоОбъекта.Удаляется = Ложь;
		КонецЕсли;
		СтрокаУдаляемогоОбъекта.НеУдаляемыхСсылок = 0;
		СтрокаУдаляемогоОбъекта.Ссылок = 0;
	КонецЦикла;
	СсылкиНаУдаляемыеОбъекты.Очистить();
	Если СтандартныйПоиск Тогда
		ТаблицаСсылок = НайтиПоСсылкам(МассивКУдалению);
	Иначе
		ТаблицаСсылок = НайтиСсылки(МассивКУдалению, Ложь);
	КонецЕсли; 
	
	ТаблицаСсылок.Колонки.Добавить("СтрокаУдаляемого");
	ТаблицаСсылок.Колонки.Добавить("СтрокаДанного");
	ТаблицаСсылок.Колонки.Добавить("ИндексКартинки");
	ТаблицаСсылок.Колонки.Добавить("Удаляется");
	ТаблицаСсылок.Индексы.Добавить("Данные");
	
	ЗапросПометки = Новый Запрос;
	МассивДобавляемыхКандидатов = Новый Массив;
	МассивДляЧтенияПометкиУдаления = Новый Массив;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ТаблицаСсылок.Количество(), "Анализ ссылающихся объектов");
	Для каждого ЭлементТаблицыСсылок из ТаблицаСсылок Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Ссылка = ЭлементТаблицыСсылок.ссылка;
		Данные = ЭлементТаблицыСсылок.Данные;
		СтрокаСсылки = УдаляемыеОбъекты.Найти(Ссылка,"Ссылка");
		МетаданныеДанных = ЭлементТаблицыСсылок.Метаданные;
		ИмяМетаданных = МетаданныеДанных.ПолноеИмя();
		ЭтоРегистрСведений = ирОбщий.ЛиКорневойТипРегистраСведенийЛкс(ирОбщий.ПолучитьПервыйФрагментЛкс(ИмяМетаданных));
		Если ЭтоРегистрСведений Тогда
			ИзмеренияРегистраСведений = МетаданныеДанных.Измерения;
			УдаляетсяРегистрСведений = Ложь;
			Для Каждого Измерение Из ИзмеренияРегистраСведений Цикл
				Если Измерение.Ведущее Тогда
					Если Ссылка = Данные[Измерение.Имя] Тогда
						УдаляетсяРегистрСведений = Истина;
						ЭлементТаблицыСсылок.Данные = ссылка;
						Данные = ссылка;
						Прервать;
					КонецЕсли; 
				КонецЕсли;
			КонецЦикла;
			Если Не УдаляетсяРегистрСведений Тогда
				ЭлементТаблицыСсылок.Данные = Неопределено;
				Данные = Неопределено;
			КонецЕсли; 
		КонецЕсли;
		
		Если Данные = Неопределено Тогда
			ЭлементТаблицыСсылок.ИндексКартинки = 3;
			СтрокаДанного = Неопределено;
		Иначе
			СтрокаДанного = ?(Данные = Ссылка, СтрокаСсылки, УдаляемыеОбъекты.Найти(Данные, "Ссылка"));
			Если НеблокирующиеТипы.Найти(ИмяМетаданных, "Метаданные") <> Неопределено Тогда
				МассивДобавляемыхКандидатов.Добавить(Данные);
			КонецЕсли; 
			МассивДляЧтенияПометкиУдаления.Добавить(Данные);
		КонецЕсли; 
		СтрокаСсылки.Ссылок = СтрокаСсылки.Ссылок + 1;
		УдаляетсяСсылка = СтрокаСсылки.Удаляется;
		Если СтрокаДанного = Неопределено Тогда
			Если Истина
				И ЭтоРегистрСведений
				И НеблокирующиеТипы.Найти(ИмяМетаданных, "Метаданные") <> Неопределено 
			Тогда
				УдаляетсяДанное = Истина;
			Иначе
				УдаляетсяДанное = Ложь;
				Если УдаляетсяСсылка Тогда
					СтрокаСсылки.Удаляется = Ложь;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			УдаляетсяДанное = СтрокаДанного.Удаляется;
			Если Не УдаляетсяДанное Тогда
				Если УдаляетсяСсылка Тогда
					СтрокаСсылки.Удаляется = ложь;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		Если УдаляетсяДанное = ложь Тогда
			СтрокаСсылки.НеУдаляемыхСсылок = СтрокаСсылки.НеУдаляемыхСсылок + 1;
		КонецЕсли; 
		ЭлементТаблицыСсылок.Удаляется = УдаляетсяДанное;
		ЭлементТаблицыСсылок.СтрокаУдаляемого = СтрокаСсылки;
		ЭлементТаблицыСсылок.СтрокаДанного = СтрокаДанного;
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	Если МассивДобавляемыхКандидатов.Количество() > 0 Тогда
		Если ДобавитьМассивОбъектовВУдаляемыеОбъекты(МассивДобавляемыхКандидатов, Ложь) Тогда 
			Сообщить("Состав кандидатов на удаление был дополнен. Рекомендуется выполнить контроль заново");
		КонецЕсли; 
	КонецЕсли; 
	ТаблицаЧтенияПометкиУдаления = УдаляемыеОбъекты.ВыгрузитьКолонки();
	Для Каждого Объект Из МассивДляЧтенияПометкиУдаления Цикл
		СтрокаОбъекта = ТаблицаЧтенияПометкиУдаления.Добавить();
		СтрокаОбъекта.Ссылка = Объект;
	КонецЦикла;
	СчитанныеПометки = ОбновитьДанныеКандидатов(ТаблицаЧтенияПометкиУдаления);
	Для Каждого СтрокаСчитаннойПометки Из СчитанныеПометки Цикл
		СтрокиСсылающегося = ТаблицаСсылок.НайтиСтроки(Новый Структура("Данные", СтрокаСчитаннойПометки.Ссылка));
		Для Каждого СтрокаСсылающегося Из СтрокиСсылающегося Цикл
			СтрокаСсылающегося.ИндексКартинки = ?(СтрокаСчитаннойПометки.ПометкаУдаления, 1, 0);
		КонецЦикла;
	КонецЦикла;
	НашлиДляИсключения = Истина;
	Пока НашлиДляИсключения Цикл
		НашлиДляИсключения = Ложь;
		Для каждого ЭлементТаблицыСсылок из ТаблицаСсылок Цикл
			СтрокаДанного = ЭлементТаблицыСсылок.СтрокаДанного;
			Если СтрокаДанного <> Неопределено Тогда
				УдаляетсяДанное = СтрокаДанного.Удаляется;
				Удаляется = ЭлементТаблицыСсылок.Удаляется;
				СтрокаСсылки = ЭлементТаблицыСсылок.СтрокаУдаляемого;
				УдаляетсяСсылка = СтрокаСсылки.Удаляется;
				Если Удаляется и Не УдаляетсяДанное  Тогда
					ЭлементТаблицыСсылок.Удаляется = Ложь;
					СтрокаСсылки.НеУдаляемыхСсылок = СтрокаСсылки.НеУдаляемыхСсылок + 1;
				КонецЕсли;
				Если УдаляетсяСсылка И Не УдаляетсяДанное Тогда
					СтрокаСсылки.Удаляется = ложь;
					НашлиДляИсключения = Истина;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
	НеобходимоВыполнитьКонтроль = Ложь;
	вДоступностьКнопок();
	вПодсчитатьИтогУдаляемыеОбъекты();
	вПодсчитатьИтогСсылкиНаУдаляемыеОбъекты();
	вПоказатьСсылкиНаУдаляемыйОбъект();
	
КонецПроцедуры

// Подсчитывает количество Помеченных, Выбранных, Удаляемых и НеУдаляемых объектов
//
Процедура вПодсчитатьИтогУдаляемыеОбъекты()
	ТекстНадписи =  "Всего: " + УдаляемыеОбъекты.Количество() +"   Выбрано: " + УдаляемыеОбъекты.Итог("Удалять");
	Если ТаблицаСсылок <> Неопределено Тогда
		ВозможноУдалить = 0;
		Для Каждого СтрокаУдаляемогоОбъекта из УдаляемыеОбъекты Цикл
			Если СтрокаУдаляемогоОбъекта.Удалять И СтрокаУдаляемогоОбъекта.Удаляется Тогда
				ВозможноУдалить = ВозможноУдалить + 1;
			КонецЕсли;
		КонецЦикла;
		ТекстНадписи = ТекстНадписи + "   Возможно удалить: " + ВозможноУдалить + "   Невозможно удалить: " + (УдаляемыеОбъекты.Количество() - ВозможноУдалить);
	КонецЕсли;
	ЭлементыФормы.НадписьОбъекты.Значение = ТекстНадписи;
КонецПроцедуры

Процедура ПослеИзмененияСоставаКонтролируемыхОбъектов()
	
	ЭтаФорма.НеобходимоВыполнитьКонтроль = Истина;
	вДоступностьКнопок();
	
КонецПроцедуры

Процедура ПослеИзмененияСоставаКандидатов()
	
	УдаляемыеОбъекты.Сортировать("Метаданные, Представление");
	ПослеИзмененияСоставаКонтролируемыхОбъектов();

КонецПроцедуры

// Подсчитывает количество Найденных, Удаляемых и НеУдаляемых ссылок на текущий объектов
//
Процедура вПодсчитатьИтогСсылкиНаУдаляемыеОбъекты()
	СтрокаУдаляемыхОбъектов = ЭлементыФормы.УдаляемыеОбъекты.ТекущиеДанные;
	Если СтрокаУдаляемыхОбъектов = Неопределено или ТаблицаСсылок = Неопределено Тогда
		ЭлементыФормы.НадписьСсылки.Значение = "";
	Иначе
		ЭлементыФормы.НадписьСсылки.Значение = "Найдено: " + СтрокаУдаляемыхОбъектов.Ссылок
		+ "     Удаляемых: " + (СтрокаУдаляемыхОбъектов.Ссылок-СтрокаУдаляемыхОбъектов.НеУдаляемыхСсылок)
		+ "     Неудаляемых: " + СтрокаУдаляемыхОбъектов.НеУдаляемыхСсылок;
	КонецЕсли;
КонецПроцедуры

// Показывает ссылки в таблице СсылкиНаУдаляемыеОбъекты
// на текущий удаляемый объект из таблицы УдаляемыеОбъекты
//
Процедура вПоказатьСсылкиНаУдаляемыйОбъект()
	СтрокаУдаляемыхОбъектов = ЭлементыФормы.УдаляемыеОбъекты.ТекущиеДанные;
	СсылкиНаУдаляемыеОбъекты.Очистить();
	Если ТаблицаСсылок = Неопределено или СтрокаУдаляемыхОбъектов = Неопределено Тогда
		
	Иначе
		МассивСсылок = ТаблицаСсылок.НайтиСтроки(Новый Структура("Ссылка",СтрокаУдаляемыхОбъектов.Ссылка));
		Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(МассивСсылок.Количество(), "Загрузка ссылающихся объектов");
		Для каждого Строка Из МассивСсылок Цикл
			ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
			НоваяСтрока = СсылкиНаУдаляемыеОбъекты.Добавить();
			НоваяСтрока.Ссылка = Строка.Ссылка;
			НоваяСтрока.Данные = Строка.Данные;
			НоваяСтрока.Метаданные = Строка.Метаданные.ПолноеИмя();
			НоваяСтрока.ИндексКартинки = Строка.ИндексКартинки;
			НоваяСтрока.ЕстьВУдаляемыхОбъектах = УдаляемыеОбъекты.Найти(НоваяСтрока.Данные, "Ссылка") <> Неопределено;
			НоваяСтрока.Удаляется = Строка.Удаляется;
			НоваяСтрока.уваОбъектСвязи = Строка.ОбъектСвязи;
			НоваяСтрока.ГлобальныйИндексСсылки = ТаблицаСсылок.Индекс(Строка);
		КонецЦикла; 
		ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	КонецЕсли; 
	вПодсчитатьИтогСсылкиНаУдаляемыеОбъекты();
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Контроль" Основных действий формы,
//
Процедура ОсновныеДействияФормыКонтроль(Кнопка)
	
	Ответ = Вопрос("Выполнить после контроля удаление объектов, которые возможно удалить?", РежимДиалогаВопрос.ДаНетОтмена);
	Если Ответ <>  КодВозвратаДиалога.Отмена Тогда
		вКонтроль();
		Если Истина
			И Не НеобходимоВыполнитьКонтроль
			И Ответ = КодВозвратаДиалога.Да
			И ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Удалить.Доступность
		Тогда 
			ОсновныеДействияФормыУдалить();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Удалить" Основных действий формы,
//
Процедура ОсновныеДействияФормыУдалить(Кнопка = Неопределено)
	УдалитьОбъектыЛкс();
	вДоступностьКнопок();
КонецПроцедуры

// Процедура вызывается при изменении флажков:
//	ПоказыватьОбъектыКоторыеМожноУдалить,ПоказыватьОбъектыКоторыеНельзяУдалить
//
Процедура ПоказыватьОбъектыПриИзменении(Элемент)
	
	Если Истина
		И Не ПоказыватьОбъектыКоторыеМожноУдалить
		И Не ПоказыватьОбъектыКоторыеНельзяУдалить
	Тогда
		Если Элемент = ЭлементыФормы.ПоказыватьОбъектыКоторыеМожноУдалить Тогда
			ЭтаФорма.ПоказыватьОбъектыКоторыеНельзяУдалить = Истина;
		Иначе
			ЭтаФорма.ПоказыватьОбъектыКоторыеМожноУдалить = Истина;
		КонецЕсли; 
	КонецЕсли; 
	ОтборСтрок = ЭлементыФормы.УдаляемыеОбъекты.ОтборСтрок;
	Если ПоказыватьОбъектыКоторыеМожноУдалить и ПоказыватьОбъектыКоторыеНельзяУдалить тогда
		ОтборСтрок.Удаляется.Использование = Ложь;
		ОтборСтрок.Удалять.Использование = Ложь;
	ИначеЕсли не ПоказыватьОбъектыКоторыеМожноУдалить и не ПоказыватьОбъектыКоторыеНельзяУдалить тогда
		ОтборСтрок.Удаляется.Установить(Истина,Истина);
		ОтборСтрок.Удалять.Установить(Ложь,Истина);
	ИначеЕсли ПоказыватьОбъектыКоторыеНельзяУдалить тогда
		ОтборСтрок.Удаляется.Установить(Ложь,Истина);
		ОтборСтрок.Удалять.Использование = Ложь;
	Иначе
		ОтборСтрок.Удаляется.Установить(Истина,Истина);
		ОтборСтрок.Удалять.Использование = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при изменении флажков:
//	ПоказыватьСсылкиУдаляемых,ПоказыватьСсылкиНеудаляемых
//
Процедура ПоказыватьСсылкиПриИзменении(Элемент)
	
	Если Истина
		И Не ПоказыватьСсылкиУдаляемых
		И Не ПоказыватьСсылкиНеудаляемых
	Тогда
		Если Элемент = ЭлементыФормы.ПоказыватьСсылкиНеудаляемых Тогда
			ЭтаФорма.ПоказыватьСсылкиУдаляемых = Истина;
		Иначе
			ЭтаФорма.ПоказыватьСсылкиНеудаляемых = Истина;
		КонецЕсли; 
	КонецЕсли; 
	Если Истина
		И ПоказыватьСсылкиУдаляемых
		И ПоказыватьСсылкиНеудаляемых
	Тогда
		ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ОтборСтрок.Удаляется.Использование = Ложь;
	Иначе 
		ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ОтборСтрок.Удаляется.Установить(ПоказыватьСсылкиУдаляемых, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанельУдаляемыхОбъектов"

// Процедура вызывается при нажатии кнопки "Обновить" командной панели "Удаляемые Объекты"
//
Процедура КоманднаяПанельУдаляемыхОбъектовОбновить(Кнопка)
	вОбновитьПомеченныеНаУдаление();
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Установить Флажки" командной панели "Удаляемые Объекты"
//
Процедура КоманднаяПанельУдаляемыхОбъектовУстановитьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.УдаляемыеОбъекты, "Удалять", Истина);
	ПослеИзмененияСоставаКонтролируемыхОбъектов();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Снять Флажки" командной панели "Удаляемые Объекты"
//
Процедура КоманднаяПанельУдаляемыхОбъектовСнятьФлажки(Кнопка)
	
	ирОбщий.ИзменитьПометкиВыделенныхСтрокЛкс(ЭлементыФормы.УдаляемыеОбъекты, "Удалять", Ложь);
	ПослеИзмененияСоставаКонтролируемыхОбъектов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Удаляемые Объекты"

// Процедура вызывается при активизации строки табличного поля "Удаляемые объекты"
//
Процедура УдаляемыеОбъектыПриАктивизацииСтроки(Элемент)
	вПоказатьСсылкиНаУдаляемыйОбъект();
КонецПроцедуры

// Процедура вызывается при выоде строки табличного поля "Удаляемые объекты"
//
Процедура УдаляемыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ЯчейкаКартинки = ОформлениеСтроки.Ячейки.Картинка;
	ЯчейкаКартинки.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
	ЯчейкаКартинки.ОтображатьКартинку = Истина;
	Если ТаблицаСсылок <> Неопределено и ДанныеСтроки.Удалять Тогда
		Если ДанныеСтроки.Удаляется Тогда
			ОформлениеСтроки.Ячейки.Удалять.ЦветТекста = WebЦвета.ВесеннеЗеленый;
		Иначе
			ОформлениеСтроки.Ячейки.Удалять.ЦветТекста = WebЦвета.Красный;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается перед началом изменения табличного поля "Удаляемые объекты"
//
Процедура УдаляемыеОбъектыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущаяКолонка.ДанныеФлажка <> "Удалять" Тогда
		ФормаОбъекта = ЭлементыФормы.УдаляемыеОбъекты.ТекущиеДанные.ссылка.ПолучитьФорму(,,);
		ФормаОбъекта.Открыть();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

// Процедура вызывается при изменении флажка табличного поля "Удаляемые объекты"
//
Процедура УдаляемыеОбъектыПриИзмененииФлажка(Элемент, Колонка)
	ПослеИзмененияСоставаКонтролируемыхОбъектов();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Ссылки на удаляемые объекты"

// Процедура вызывается при выоде строки табличного поля "Ссылки на удаляемые объекты"
//
Процедура СсылкиНаУдаляемыеОбъектыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Ячейки = ОформлениеСтроки.Ячейки;
	Ячейки.Удаляется.ОтображатьТекст = Ложь;
	Если ДанныеСтроки.Удаляется Тогда
		Ячейки.Удаляется.УстановитьКартинку(ирОбщий.ПолучитьОбщуюКартинкуЛкс("ирТестирование"));
	Иначе
		Ячейки.Удаляется.УстановитьКартинку(ирОбщий.ПолучитьОбщуюКартинкуЛкс("ирИсключение"));
	КонецЕсли;
	Ячейки.Картинка.ИндексКартинки = ДанныеСтроки.ИндексКартинки;
	Ячейки.Картинка.ОтображатьКартинку = Истина;
КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовПометитьУказанноеКоличество(Кнопка)
	
	Если ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;	
		
	// запрашивает сколько пометить и помечает от текущей строки
	Колво = 300;
	Если Не ВвестиЧисло(Колво,"Количество помечаемых",3,0) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтборанных = ирОбщий.ПолучитьПостроительТабличногоПоляСОтборомКлиентаЛкс(ЭлементыФормы.УдаляемыеОбъекты).Результат.Выгрузить();
	ТаблицаОтборанных.Индексы.Добавить("Ссылка");
	// бежим от текущей строки помечаем
	Для К = ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока.НомерСтроки ПО УдаляемыеОбъекты.Количество() Цикл
		СтрокаУдаляемогоОбъекта = УдаляемыеОбъекты[К-1];
		Если ТаблицаОтборанных.Найти(СтрокаУдаляемогоОбъекта.Ссылка, "Ссылка") <> Неопределено Тогда
			СтрокаУдаляемогоОбъекта.Удалять = Истина;
			Колво = Колво - 1;
		КонецЕсли;
		Если Колво <= 0 Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ПослеИзмененияСоставаКонтролируемыхОбъектов();
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыРедакторОбъектаБД(Кнопка = Неопределено)
	
	ТекущаяСтрока = ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	//ОткрытьСсылающийсяОбъектВРедактореОбъектаБД(ТекущаяСтрока);
	ТипМетаданных = ирОбщий.ПолучитьПервыйФрагментЛкс(ТекущаяСтрока.Метаданные);
	Если ирОбщий.ЛиКорневойТипСсылочногоОбъектаБДЛкс(ТипМетаданных) Тогда
		КлючОбъекта = ТекущаяСтрока.Данные;
	ИначеЕсли ирОбщий.ЛиКорневойТипКонстантыЛкс(ТипМетаданных) Тогда
		КлючОбъекта = Новый (СтрЗаменить(ТекущаяСтрока.Метаданные, ".", "МенеджерЗначения."));
	Иначе // Регистр сведений
		КлючЗаписи = ТаблицаСсылок[ТекущаяСтрока.ГлобальныйИндексСсылки].КлючЗаписиРегистраСведений;
		КлючОбъекта = ирОбщий.ПолучитьНаборЗаписейПоКлючуЛкс(ТекущаяСтрока.Метаданные, КлючЗаписи);
	КонецЕсли; 
	ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(КлючОбъекта, ТекущаяСтрока.Ссылка);

КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовОПодсистеме(Кнопка)
	
	ирОбщий.ОткрытьСправкуПоПодсистемеЛкс(ЭтотОбъект);
	
КонецПроцедуры

Процедура УдаляемыеОбъектыСсылкаПриИзменении(Элемент)
	
	ОбновитьСтрокуУдаляемогоОбъекта();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ЭлементыФормы.ЗаписьНаСервере.Доступность = Не ирКэш.ЛиПортативныйРежимЛкс() Или ирПортативный.ЛиСерверныйМодульДоступенЛкс();
	ПослеИзмененияСоставаКандидатов();
	Если УдаляемыеОбъекты.Количество() = 0 Тогда
		Ответ = Вопрос("Поиск помеченных на удаление может занять продолжительное время!
		|Выполнить его сейчас?", РежимДиалогаВопрос.ДаНет, 10);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			вОбновитьПомеченныеНаУдаление();
			ЭлементыФормы.УдаляемыеОбъекты.НастройкаОтбораСтрок.Ссылка.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовПодбор(Кнопка)
	
	Если ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока <> Неопределено Тогда
		НачальноеЗначение = ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока.Ссылка;
	КонецЕсли; 
	ирОбщий.ОткрытьПодборСВыборомТипаЛкс(ЭлементыФормы.УдаляемыеОбъекты,, НачальноеЗначение);
	
КонецПроцедуры

Процедура УдаляемыеОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Массив") Тогда
		Массив = Новый Массив();
		Массив.Добавить(ВыбранноеЗначение);
		ВыбранноеЗначение = Массив;
	КонецЕсли;
	Если ДобавитьМассивОбъектовВУдаляемыеОбъекты(ВыбранноеЗначение) Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли; 

КонецПроцедуры

Функция ДобавитьМассивОбъектовВУдаляемыеОбъекты(МассивОбъектов, УстанавливатьТекущуюСтроку = Истина) Экспорт 
	
	ВМассивеБылиНовыеПодходящиеОбъекты = Ложь;
	ТаблицаОбъектов = УдаляемыеОбъекты.ВыгрузитьКолонки();
	Для Каждого Объект Из МассивОбъектов Цикл
		Если ирОбщий.ЛиСсылкаНаОбъектБДЛкс(Объект) Тогда
			СтрокаОбъекта = ТаблицаОбъектов.Добавить();
			СтрокаОбъекта.Ссылка = Объект;
		КонецЕсли; 
	КонецЦикла;
	Если ТаблицаОбъектов.Количество() = 0 Тогда
		Возврат ВМассивеБылиНовыеПодходящиеОбъекты;
	КонецЕсли; 
	ОбновитьДанныеКандидатов(ТаблицаОбъектов);
	СписокБылПустым = УдаляемыеОбъекты.Количество() = 0;
	СоответствиеТипаКМетаданному = Новый Соответствие;
	Индикатор = ирОбщий.ПолучитьИндикаторПроцессаЛкс(ТаблицаОбъектов.Количество(), "Добавление кандидатов");
	Для Каждого СтрокаОбъекта Из ТаблицаОбъектов Цикл
		ирОбщий.ОбработатьИндикаторЛкс(Индикатор);
		Если Не СписокБылПустым Тогда
			СтрокаКандидата = УдаляемыеОбъекты.Найти(СтрокаОбъекта.Ссылка, "Ссылка");
		Иначе
			СтрокаКандидата = Неопределено;
		КонецЕсли; 
		Если СтрокаКандидата = Неопределено Тогда
			СтрокаКандидата = УдаляемыеОбъекты.Добавить();
			СтрокаКандидата.Ссылка = СтрокаОбъекта.Ссылка;
			ОбновитьСтрокуУдаляемогоОбъекта(СтрокаКандидата, СоответствиеТипаКМетаданному, СтрокаОбъекта.ПометкаУдаления, СтрокаОбъекта.Представление);
			ВМассивеБылиНовыеПодходящиеОбъекты = Истина;
		КонецЕсли; 
	КонецЦикла;
	ирОбщий.ОсвободитьИндикаторПроцессаЛкс();
	Если Истина
		И УстанавливатьТекущуюСтроку 
		И СтрокаКандидата <> Неопределено
	Тогда
		ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока = СтрокаКандидата;
	КонецЕсли; 
	Если ВМассивеБылиНовыеПодходящиеОбъекты Тогда
		ЭтаФорма.НеобходимоВыполнитьКонтроль = Истина;
		Если Открыта() Тогда
			ПодключитьОбработчикОжидания("ПослеИзмененияСоставаКандидатов", 0.1, Истина);
		КонецЕсли; 
	КонецЕсли; 
	Возврат ВМассивеБылиНовыеПодходящиеОбъекты;

КонецФункции

Процедура КП_СсылкиНаУдаляемыеОбъектыДобавитьВУдаляемые(Кнопка)
	
	МассивОбъектов = Новый Массив;
	Для Каждого ВыбраннаяСтрока Из ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ВыделенныеСтроки Цикл
		МассивОбъектов.Добавить(ВыбраннаяСтрока.Данные);
	КонецЦикла;
	ДобавитьМассивОбъектовВУдаляемыеОбъекты(МассивОбъектов, Ложь);
	Для Каждого ВыбраннаяСтрока Из ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ВыделенныеСтроки Цикл
		МассивОбъектов.Добавить(ВыбраннаяСтрока.Данные);
	КонецЦикла;
	вПоказатьСсылкиНаУдаляемыйОбъект();
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыНайтиСсылкуВУдаляемыхОбъектах(Кнопка)
	
	Если ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СтрокаУдаляемого = УдаляемыеОбъекты.Найти(ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ТекущаяСтрока.Данные, "Ссылка");
	Если СтрокаУдаляемого <> Неопределено Тогда
		ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока = СтрокаУдаляемого;
	Иначе
		Предупреждение("Данные не найдены в удаляемых объектах");
	КонецЕсли; 
	
КонецПроцедуры

Процедура СсылкиНаУдаляемыеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ВыбраннаяСтрока.Данные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		КП_СсылкиНаУдаляемыеОбъектыРедакторОбъектаБД();
	Иначе
		//ФормаОбъекта = ВыбраннаяСтрока.Данные.ПолучитьФорму(,,);
		//ФормаОбъекта.Открыть();
		ОткрытьЗначение(ВыбраннаяСтрока.Данные);
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовРедакторОбъектаБД(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.УдаляемыеОбъекты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	ирОбщий.ОткрытьСсылкуВРедактореОбъектаБДЛкс(ТекущаяСтрока.Ссылка);
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыКонсольОбработки(Кнопка)
	
	ирОбщий.ОткрытьОбъектыИзВыделенныхЯчеекВПодбореИОбработкеОбъектовЛкс(ЭтаФорма.ЭлементыФормы.СсылкиНаУдаляемыеОбъекты, "Данные");

КонецПроцедуры

Процедура СтруктураКоманднойПанелиНажатие(Кнопка)
	
	ирОбщий.ОткрытьСтруктуруКоманднойПанелиЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ирОбщий.ФормаОбработкаОповещенияЛкс(ЭтаФорма, ИмяСобытия, Параметр, Источник); 

КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовОтборБезЗначения(Кнопка)
	
	ирОбщий.ТабличноеПоле_ОтборБезЗначенияВТекущейКолонке_КнопкаЛкс(ЭлементыФормы.УдаляемыеОбъекты);
	
КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовМенеджерТабличногоПоля(Кнопка)
	
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ЭлементыФормы.УдаляемыеОбъекты);
	
КонецПроцедуры

Процедура НеблокирующиеТипыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	РедактироватьНеблокирующиеТипы();
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура РедактироватьНеблокирующиеТипы()
    
	Форма = ирКэш.Получить().ПолучитьФорму("ВыборОбъектаМетаданных", , ЭтаФорма);
	лСтруктураПараметров = Новый Структура;
	лСтруктураПараметров.Вставить("НачальноеЗначениеВыбора", НеблокирующиеТипы.ВыгрузитьКолонку("Метаданные"));
	лСтруктураПараметров.Вставить("ОтображатьКонстанты", Истина);
	лСтруктураПараметров.Вставить("ОтображатьРегистры", Истина);
	лСтруктураПараметров.Вставить("ОтображатьПоследовательности", Истина);
	лСтруктураПараметров.Вставить("ОтображатьСсылочныеОбъекты", Истина);
	лСтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	Форма.НачальноеЗначениеВыбора = лСтруктураПараметров;
	РезультатФормы = Форма.ОткрытьМодально();
	Если ТипЗнч(РезультатФормы) = Тип("Массив") Тогда
		НеблокирующиеТипы.Очистить();
		Для Каждого ПолноеИмяМД Из РезультатФормы Цикл
			СтрокаНеблокируюещгоТипа = НеблокирующиеТипы.Добавить();
			СтрокаНеблокируюещгоТипа.Метаданные = ПолноеИмяМД;
		КонецЦикла;
		НеблокирующиеТипы.Сортировать("Метаданные");
	КонецЕсли;

КонецПроцедуры

Процедура КПНеблокирующиеТипыИзменить(Кнопка)
	
	РедактироватьНеблокирующиеТипы();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	вПодсчитатьИтогУдаляемыеОбъекты();
	вПодсчитатьИтогСсылкиНаУдаляемыеОбъекты();
	ирОбщий.ОбновитьЗаголовкиСтраницПанелейЛкс(ЭтаФорма);
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыДобавитьВНеблокирующие(Кнопка)
	
	Для Каждого ВыбраннаяСтрока Из ЭлементыФормы.СсылкиНаУдаляемыеОбъекты.ВыделенныеСтроки Цикл
		Если НеблокирующиеТипы.Найти(ВыбраннаяСтрока.Метаданные) = Неопределено Тогда
			СтрокаНеблокурующегоТипа = НеблокирующиеТипы.Добавить();
			СтрокаНеблокурующегоТипа.Метаданные = ВыбраннаяСтрока.Метаданные;
		КонецЕсли;
	КонецЦикла;
	НеблокирующиеТипы.Сортировать("Метаданные");
	ПослеИзмененияСоставаКандидатов();
	
КонецПроцедуры

Процедура ЗагрузитьНастройкиИзСтруктуры(СтруктураНастроек)
	
	УдаляемыеОбъекты.Очистить();
	ТаблицаКандидатов = ОбновитьДанныеКандидатов(СтруктураНастроек.УдаляемыеОбъекты);
	ирОбщий.ЗагрузитьВТаблицуЗначенийЛкс(ТаблицаКандидатов, УдаляемыеОбъекты);
	ПослеИзмененияСоставаКандидатов();
	
КонецПроцедуры

Функция ПолучитьСтруктуруНастроекОбработки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("УдаляемыеОбъекты", УдаляемыеОбъекты.Выгрузить());
	Возврат СтруктураНастроек;
	
КонецФункции

Процедура КоманднаяПанельУдаляемыхОбъектовОткрытьФайл(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок = "Выберите файл для загрузки настроек обработки";
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("dor", "Файл удаления объектов с контролем ссылок");
	ДиалогВыбораФайла.Расширение = "dor";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		Поток = Новый ЧтениеXML;
		Поток.ОткрытьФайл(ДиалогВыбораФайла.ПолноеИмяФайла);
		Попытка
			СтруктураНастроек = СериализаторXDTO.ПрочитатьXML(Поток);
		Исключение
			Сообщить("Ошибка чтения настроек из файла: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки; 
		Поток.Закрыть();
		ЗагрузитьНастройкиИзСтруктуры(СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовСохранить(Кнопка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Заголовок = "Укажите файл для сохранения настроек обработки";
	ДиалогВыбораФайла.Фильтр = ирОбщий.ПолучитьСтрокуФильтраДляВыбораФайлаЛкс("dor", "Файл удаления объектов с контролем ссылок");
	ДиалогВыбораФайла.Расширение = "fdr";
	Если ДиалогВыбораФайла.Выбрать() Тогда
		СтруктураНастроек = ПолучитьСтруктуруНастроекОбработки();
		Поток = Новый ЗаписьXML;
		Поток.ОткрытьФайл(ДиалогВыбораФайла.ПолноеИмяФайла,);
		СериализаторXDTO.ЗаписатьXML(Поток, СтруктураНастроек);
		Поток.Закрыть();
	КонецЕсли; 
	
КонецПроцедуры

Процедура КлсУниверсальнаяКомандаНажатие(Кнопка) Экспорт 
	
	ирОбщий.УниверсальнаяКомандаФормыЛкс(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработчикОжиданияСПараметрамиЛкс() Экспорт 
	
	ирОбщий.ОбработчикОжиданияСПараметрамиЛкс();

КонецПроцедуры

Процедура КоманднаяПанельУдаляемыхОбъектовОтобратьПоТипам(Кнопка)
	
	ирОбщий.ИзменитьОтборКлиентаПоМетаданнымЛкс(ЭлементыФормы.УдаляемыеОбъекты);
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыМенеджерТабличногоПоля(Кнопка)
	
	 ирОбщий.ПолучитьФормуЛкс("Обработка.ирМенеджерТабличногоПоля.Форма",, ЭтаФорма, ).УстановитьСвязь(ЭлементыФормы.СсылкиНаУдаляемыеОбъекты);
	
КонецПроцедуры

Процедура КП_СсылкиНаУдаляемыеОбъектыОтобратьПоТипам(Кнопка)
	
	ирОбщий.ИзменитьОтборКлиентаПоМетаданнымЛкс(ЭлементыФормы.СсылкиНаУдаляемыеОбъекты);

КонецПроцедуры

ирОбщий.ИнициализироватьФормуЛкс(ЭтаФорма, "Обработка.ирУдалениеОбъектовСКонтролемСсылок.Форма.Форма");
